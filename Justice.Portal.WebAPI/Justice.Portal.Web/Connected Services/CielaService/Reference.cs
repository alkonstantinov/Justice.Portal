//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CielaService
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CielaService.PlainServiceSoap")]
    public interface PlainServiceSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EuroTreeStructureContentSelect", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> EuroTreeStructureContentSelectAsync(string key, int structItemID, System.DateTime currentDate, System.DateTime offsetDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EuroOfficialJournalAllEditionsGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> EuroOfficialJournalAllEditionsGetAsync(string key, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EuroOfficialJournalContentGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> EuroOfficialJournalContentGetAsync(string key, int idEdition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EuroDocumentDisplay", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.EuroDocumentDisplayResponse> EuroDocumentDisplayAsync(CielaService.EuroDocumentDisplayRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EuroDocumentInfoGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> EuroDocumentInfoGetAsync(string key, int IDNA);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EuroRefInfoGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> EuroRefInfoGetAsync(string key, int IDREF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EuroDbActualityInfoGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> EuroDbActualityInfoGetAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EuroDocumentIdnasGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> EuroDocumentIdnasGetAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/OfficialJournalTypesOfChangeGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> OfficialJournalTypesOfChangeGetAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/OfficialJournalEditionCreate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.OfficialJournalEditionCreateResponse> OfficialJournalEditionCreateAsync(CielaService.OfficialJournalEditionCreateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/OfficialJournalEditionUpdate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.OfficialJournalEditionUpdateResponse> OfficialJournalEditionUpdateAsync(CielaService.OfficialJournalEditionUpdateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/OfficialJournalEditionDelete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> OfficialJournalEditionDeleteAsync(string key, int idEdition, string idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/OfficialJournalEditionsGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> OfficialJournalEditionsGetAsync(string key, int idType, int partition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InfoTreeStructureSelectAll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> InfoTreeStructureSelectAllAsync(string key, string idBase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetNormiDocumentIcons", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.GetNormiDocumentIconsResponse> GetNormiDocumentIconsAsync(CielaService.GetNormiDocumentIconsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InfoTreeStructureSelect", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> InfoTreeStructureSelectAsync(string key, string idBase, int structItemID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InfoTreeStructureSelectExtra", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> InfoTreeStructureSelectExtraAsync(string key, string idBase, int structItemID, string sortOrder, string extraCondition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InfoTreeStructureContentSelect", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> InfoTreeStructureContentSelectAsync(string key, string idBase, int structItemID, int codeEkatte, int legalFormCode, int codeNkid, int bulProofCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InfoTreeStructureContentSelectParam", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> InfoTreeStructureContentSelectParamAsync(string key, string idBase, int structItemID, int codeEkatte, int legalFormCode, int codeNkid, int bulProofCode, long selectFirstRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InfoTreeMainStructure", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> InfoTreeMainStructureAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InfoGetAccentStructID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<int> InfoGetAccentStructIDAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InfoGetAccentDocuments", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> InfoGetAccentDocumentsAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InfoDocumentDisplay", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.InfoDocumentDisplayResponse> InfoDocumentDisplayAsync(CielaService.InfoDocumentDisplayRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InfoDocumentDisplayUIC", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.InfoDocumentDisplayUICResponse> InfoDocumentDisplayUICAsync(CielaService.InfoDocumentDisplayUICRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InfoDocumentContent", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> InfoDocumentContentAsync(string key, string idBase, int documentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InfoBaseActualDate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> InfoBaseActualDateAsync(string key, string idBase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InfoLinkedPersons", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> InfoLinkedPersonsAsync(string key, string linkedBase, string personIndentType, string personIndent, string personName, string personCountry, int nLinkedLevel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InfoNOIContent", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> InfoNOIContentAsync(string key, string bulstat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InfoDDSContent", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> InfoDDSContentAsync(string key, string bulstat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetIDNAfromUIC", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<int> GetIDNAfromUICAsync(string key, string idBase, string UIC);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InfoGetDocuments", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> InfoGetDocumentsAsync(string key, string idBase, string docIDNAs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InfoDocumentIdnasGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> InfoDocumentIdnasGetAsync(string key, string idBase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InfoGetNomenclatures", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> InfoGetNomenclaturesAsync(string key, string idBase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InfoGetNomenclaturesForSearching", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> InfoGetNomenclaturesForSearchingAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NeoficTreeStructureSelect", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> NeoficTreeStructureSelectAsync(string key, int structItemID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NeoficTreeStructureContentSelect", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> NeoficTreeStructureContentSelectAsync(string key, int structItemID, int typeNoticeCode, int authorNoticeCode, int issueIDNA, int actualNotice, int actualPeriod);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NeoficNoticeDisplay", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> NeoficNoticeDisplayAsync(string key, int noticeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NeoficIssueDisplay", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.NeoficIssueDisplayResponse> NeoficIssueDisplayAsync(CielaService.NeoficIssueDisplayRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NeoficNoticesInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> NeoficNoticesInfoAsync(string key, int issueId, string noticesId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NeoficBaseActualDate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> NeoficBaseActualDateAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NeoficDbActualityInfoGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> NeoficDbActualityInfoGetAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NeoficGetIssue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.NeoficGetIssueResponse> NeoficGetIssueAsync(CielaService.NeoficGetIssueRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NeoficDocumentIdnasGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> NeoficDocumentIdnasGetAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NormiDocumentExists", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> NormiDocumentExistsAsync(int documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetNewPracticesUrl", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetNewPracticesUrlAsync(string key, string oldUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetNormiDocumentLatestEdition", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetNormiDocumentLatestEditionAsync(int documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PracticeDbActualityInfoGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> PracticeDbActualityInfoGetAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PracticeDocumentDisplay", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.PracticeDocumentDisplayResponse> PracticeDocumentDisplayAsync(CielaService.PracticeDocumentDisplayRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PracticeDocumentInfoGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> PracticeDocumentInfoGetAsync(string key, int IDNA);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertCalcBlankRecord", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task InsertCalcBlankRecordAsync(string key, string userName, int blankId, CielaService.SerializableKeyValuePairOfStringString[] blankInfo, string recordData, CielaService.SerializableKeyValuePairOfStringString[] additionalData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertBlankRecords", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task InsertBlankRecordsAsync(string key, string userName, CielaService.PreviousBlankRecord[] blankRecords);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteOldBlankRecords", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task DeleteOldBlankRecordsAsync(string key, string[] idsOfRecords);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCalcBlankPreviousRecords", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.PreviousBlankRecord[]> GetCalcBlankPreviousRecordsAsync(string key, string userName, int blankId, int blankDatabase, int blankVersion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAllBlankRecords", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.PreviousBlankRecord[]> GetAllBlankRecordsAsync(string key, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSpecificBlankRecord", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetSpecificBlankRecordAsync(string key, int recordId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetMessagesForUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.UserMessageRecord[]> GetMessagesForUserAsync(string key, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetUserMessagesAsRead", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task SetUserMessagesAsReadAsync(string key, string userName, int[] idsToBeSetAsRead);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAllOneTimeMessages", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.UserMessageRecord[]> GetAllOneTimeMessagesAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSpecificOneTimeMessage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.UserMessageRecord> GetSpecificOneTimeMessageAsync(string key, int messageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertNewMessage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task InsertNewMessageAsync(string key, CielaService.UserMessageRecord newMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteOneTimeMessage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task DeleteOneTimeMessageAsync(string key, int messageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateOneTimeMessage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task UpdateOneTimeMessageAsync(string key, CielaService.UserMessageRecord updateMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetReminderDocs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetReminderDocsAsync(string key, string owner_user, string reminderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HasReminderEvents", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> HasReminderEventsAsync(string key, string owner_user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CalculateReminderEvents", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.CalculateReminderEventsResponse> CalculateReminderEventsAsync(CielaService.CalculateReminderEventsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddReminderDocs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> AddReminderDocsAsync(string key, string owner_user, string docs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateReminderDocSettings", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> UpdateReminderDocSettingsAsync(string key, string docs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteReminderDocs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DeleteReminderDocsAsync(string key, string owner_user, string docs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SubmitInDB", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SubmitInDBAsync(string key, string tblName, string[] fields);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateInstances", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> UpdateInstancesAsync(string key, string tblName, string[] srchFields, string[] updtFields);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetInstances", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetInstancesAsync(string key, string tblName, string[] srchFields);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetRoleType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetRoleTypeAsync(string key, string tblName, string[] srchFields);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteInstances", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DeleteInstancesAsync(string key, string tblName, string[] srchFields);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetTillWhen", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<int> GetTillWhenAsync(string key, int productID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetTillWhen", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<int> SetTillWhenAsync(string key, int productID, int updateID, System.DateTime dataTill, string note, int issue, int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExecuteSQLBatch", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<int> ExecuteSQLBatchAsync(string key, int productID, string sqlScript);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateBlobFields", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.UpdateBlobFieldsResponse> UpdateBlobFieldsAsync(CielaService.UpdateBlobFieldsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetProductInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<int> GetProductInfoAsync(string key, int productID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetProductInfoName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetProductInfoNameAsync(string key, int productID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetInstalledProducts", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetInstalledProductsAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetServiceVersion", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetServiceVersionAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertDocumentReminder", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task InsertDocumentReminderAsync(string userName, CielaService.ArrayOfXElement documentsList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteDocumentReminder", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task DeleteDocumentReminderAsync(string userName, CielaService.ArrayOfXElement documentsList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteOccurredEvents", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task DeleteOccurredEventsAsync(string userName, CielaService.ArrayOfXElement product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CalculateReminderEventsSingle", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task CalculateReminderEventsSingleAsync(CielaService.ArrayOfXElement documentsList, CielaService.ArrayOfXElement product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CalculateReminderEventsMultiple", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task CalculateReminderEventsMultipleAsync(CielaService.ArrayOfXElement documentsList, CielaService.ArrayOfXElement product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteHistory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task DeleteHistoryAsync(string userName, CielaService.ArrayOfXElement product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetLastUpdate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.ArrayOfXElement> GetLastUpdateAsync(CielaService.ArrayOfXElement product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetEvents", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.ArrayOfXElement> GetEventsAsync(string userName, CielaService.ArrayOfXElement product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetEventsCount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<int> GetEventsCountAsync(string userName, CielaService.ArrayOfXElement product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetEventsSortPage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.ArrayOfXElement> GetEventsSortPageAsync(string userName, CielaService.ArrayOfXElement product, string sortField, bool isDesc, int itemsPerPage, int pageIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetHistory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.ArrayOfXElement> GetHistoryAsync(string userName, CielaService.ArrayOfXElement product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetFollowedDocuments", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.ArrayOfXElement> GetFollowedDocumentsAsync(string userName, CielaService.ArrayOfXElement product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetFollowedDocumentsCount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<int> GetFollowedDocumentsCountAsync(string userName, CielaService.ArrayOfXElement product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetFollowedDocumentsSortPage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.ArrayOfXElement> GetFollowedDocumentsSortPageAsync(string userName, CielaService.ArrayOfXElement product, string sortField, bool isDesc, int itemsPerPage, int pageIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HasOccurredEvents", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> HasOccurredEventsAsync(string userName, CielaService.ArrayOfXElement product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProduceReminderEvents", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task ProduceReminderEventsAsync(CielaService.ArrayOfXElement product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteOccurredEventsAll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task DeleteOccurredEventsAllAsync(string userName, CielaService.ArrayOfXElement products);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetEventsAll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.ArrayOfXElement> GetEventsAllAsync(string userName, CielaService.ArrayOfXElement products);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetHistoryAll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.ArrayOfXElement> GetHistoryAllAsync(string userName, CielaService.ArrayOfXElement products);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetFollowedDocumentsAll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.ArrayOfXElement> GetFollowedDocumentsAllAsync(string userName, CielaService.ArrayOfXElement products);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetFollowedDocumentsByPage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.ArrayOfXElement> GetFollowedDocumentsByPageAsync(string userName, CielaService.ArrayOfXElement products, string sortField, bool isDesc, int itemsPerPage, int pageIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HasOccurredEventsAll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.ArrayOfXElement> HasOccurredEventsAllAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProduceReminderEventsAll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task ProduceReminderEventsAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HasReminderError", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> HasReminderErrorAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SaveNote", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<int> SaveNoteAsync(CielaService.ArrayOfXElement newNote);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAllNotesForUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.ArrayOfXElement> GetAllNotesForUserAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetNote", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.ArrayOfXElement> GetNoteAsync(int idNote, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateNote", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.DateTime> UpdateNoteAsync(CielaService.ArrayOfXElement note);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetNotesForDocument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.ArrayOfXElement> GetNotesForDocumentAsync(int idna, int productId, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteNote", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task DeleteNoteAsync(CielaService.ArrayOfXElement note);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteNotes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task DeleteNotesAsync(int[] notesIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetNotesForDocumentItem", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.ArrayOfXElement> GetNotesForDocumentItemAsync(CielaService.ArrayOfXElement item, int productId, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAllDocumentItemsWithNotes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.ArrayOfXElement> GetAllDocumentItemsWithNotesAsync(int idna, int productId, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetTimeFilteredNotes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.ArrayOfXElement> GetTimeFilteredNotesAsync(System.DateTime startDate, System.DateTime endDate, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetTimeFilteredNotesCount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<int> GetTimeFilteredNotesCountAsync(System.DateTime startDate, System.DateTime endDate, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetTimeFilteredNotesByPage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.ArrayOfXElement> GetTimeFilteredNotesByPageAsync(System.DateTime startDate, System.DateTime endDate, string userName, string sortField, bool isDesc, int itemsPerPage, int pageIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HasRemainderNotes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> HasRemainderNotesAsync(System.DateTime startDate, System.DateTime endDate, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExportNotes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.ExportNotesResponse> ExportNotesAsync(CielaService.ExportNotesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ImportNotes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<int> ImportNotesAsync(string userName, CielaService.ArrayOfXElement notes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAllNotesWithTerms", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.ArrayOfXElement> GetAllNotesWithTermsAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetNotesWithTermsCount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<int> GetNotesWithTermsCountAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetNotesWithTermsByPage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.ArrayOfXElement> GetNotesWithTermsByPageAsync(string userName, string sortField, bool isDesc, int itemsPerPage, int pageIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RegisterProduct", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.RegisterProductResult> RegisterProductAsync(string strCode, bool StoreLicenseFile, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/XSLTInsert", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.XSLTInsertResponse> XSLTInsertAsync(CielaService.XSLTInsertRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/XSLTSelect", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.XSLTSelectResponse> XSLTSelectAsync(CielaService.XSLTSelectRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/XSLTUpdate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.XSLTUpdateResponse> XSLTUpdateAsync(CielaService.XSLTUpdateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentsWithTypeGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DocumentsWithTypeGetAsync(string key, int[] docTypes, int[] docList);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TempDocumentInfoGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.TempDocumentInfoGetResponse> TempDocumentInfoGetAsync(CielaService.TempDocumentInfoGetRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentLegalDefDelete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DocumentLegalDefDeleteAsync(string key, int idRef);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentLegalDefCreate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.DocumentLegalDefCreateResponse> DocumentLegalDefCreateAsync(CielaService.DocumentLegalDefCreateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentReferencesDelete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DocumentReferencesDeleteAsync(string key, int idRef);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentEditionUpdateTranslation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DocumentEditionUpdateTranslationAsync(string key, int idna, int idstr, int transIdna, int transIdstr, string idUser);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentReferencesCreate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.DocumentReferencesCreateResponse> DocumentReferencesCreateAsync(CielaService.DocumentReferencesCreateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentEditionCreate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.DocumentEditionCreateResponse> DocumentEditionCreateAsync(CielaService.DocumentEditionCreateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InitInstance", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> InitInstanceAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Reset", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<int> ResetAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentTermsGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DocumentTermsGetAsync(string key, int IDNA, object[] terms);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentEditionUpdateAttributes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DocumentEditionUpdateAttributesAsync(string key, int idna, int idstr, object editionDate, int editionIssue, int editionType, int typeOfChange, int transIdna, int transIdstr, string idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentEditionUpdateDocText", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.DocumentEditionUpdateDocTextResponse> DocumentEditionUpdateDocTextAsync(CielaService.DocumentEditionUpdateDocTextRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExecuteSQLScript", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> ExecuteSQLScriptAsync(string key, string query);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/StructureCreate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> StructureCreateAsync(string key, CielaService.DatabasesEditableEnum dbId, int idPrevStructure, int idParStructure, string title, int idLang, int idIcon, string condition, bool groupByYear, bool usePublishDate, bool onlyInForce, bool onlyRepealed, bool isClientVisible, bool behind, CielaService.ArrayOfXElement connectedStructure);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/StructureUpdate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> StructureUpdateAsync(string key, int idStructure, CielaService.DatabasesEditableEnum dbId, string title, int idLang, int idIcon, string condition, bool groupByYear, bool usePublishDate, bool onlyInForce, bool onlyRepealed, bool isClientVisible, CielaService.ArrayOfXElement connectedStructure, string idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/StructureCopy", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> StructureCopyAsync(string key, int idPrevStructure, int idParStructure, int idStructure, CielaService.DatabasesEditableEnum dbId, bool behind);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/StructurePropertiesSelect", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> StructurePropertiesSelectAsync(string key, int structID, CielaService.DatabasesEditableEnum dbId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/StructureMove", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> StructureMoveAsync(string key, int idPrevStructure, int idParStructure, int idStructure, CielaService.DatabasesEditableEnum dbId, bool behind, string idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/StructureDelete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> StructureDeleteAsync(string key, int structID, CielaService.DatabasesEditableEnum dbId, string idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/StructureManualInsertDoc", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> StructureManualInsertDocAsync(string key, int idStructure, int idPrevIdna, int idParIdna, int idna, CielaService.DatabasesEditableEnum dbId, int idstr, bool behind, string idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/StructureManualDeleteDoc", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> StructureManualDeleteDocAsync(string key, int idStructure, int idParIdna, int idna, CielaService.DatabasesEditableEnum dbId, string idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TreeStructureCreate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> TreeStructureCreateAsync(string key, int structItemID, int parItemID, string treeItemTitle, int childLevel, int sortNo, int IDNA, int IDSTR, int openIDStruct);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TreeStructureUpdate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> TreeStructureUpdateAsync(string key, int structItemID, int parItemID, string treeItemTitle, int childLevel, int sortNo, int IDNA, int IDSTR, int openIDStruct);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TreeStructureDelete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> TreeStructureDeleteAsync(string key, int structID, string condition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TreeStructureSubTreeMove", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> TreeStructureSubTreeMoveAsync(string key, int structID, int oldParentID, int newParentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TreeStructureSubTreeCopy", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> TreeStructureSubTreeCopyAsync(string key, int structID, int oldParentID, int newParentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TreeStructureSelect", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> TreeStructureSelectAsync(string key, int structItemID, string sortOrder, string condition, bool isClientRegime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TreeStructureSelectAll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> TreeStructureSelectAllAsync(string key, bool isClientRegime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TreeStructureContentSelectWithoutDate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> TreeStructureContentSelectWithoutDateAsync(string key, int structItemID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TreeStructureContentSelectCurrentDate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> TreeStructureContentSelectCurrentDateAsync(string key, int structItemID, System.DateTime currentDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TreeStructureContentSelect", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> TreeStructureContentSelectAsync(string key, int structItemID, System.DateTime currentDate, System.DateTime offsetDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TreeStructureDocumentInsert", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> TreeStructureDocumentInsertAsync(string key, int parentID, int documentID, int IDNA, string documentText);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TreeStructureDocumentsInsert", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> TreeStructureDocumentsInsertAsync(string key, int parentID, object[] documents);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TreeStructureDocumentDelete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> TreeStructureDocumentDeleteAsync(string key, int docID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TreeStructureDocumentsDelete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> TreeStructureDocumentsDeleteAsync(string key, object[] documents, string condition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TreeStructureGroupByYears", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> TreeStructureGroupByYearsAsync(string key, int stuctureID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TreeStructureJuridicalGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> TreeStructureJuridicalGetAsync(string key, int juridicalStructureID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/StateGazetteAllEditionsGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> StateGazetteAllEditionsGetAsync(string key, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/StateGazetteContentGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> StateGazetteContentGetAsync(string key, int idEdition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/OfficialJournalAllEditionsGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> OfficialJournalAllEditionsGetAsync(string key, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/OfficialJournalContentGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> OfficialJournalContentGetAsync(string key, int idEdition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentDisplay", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.DocumentDisplayResponse> DocumentDisplayAsync(CielaService.DocumentDisplayRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ItemRefsFromGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> ItemRefsFromGetAsync(string key, int toIdna, CielaService.ProductsDbNameEnum toDbId, int toType, int toNo, int toSubno, int toIditem, CielaService.ReferenceFromButtonsEnum buttonType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ItemRefsFromGetByPage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> ItemRefsFromGetByPageAsync(string key, int toIdna, CielaService.ProductsDbNameEnum toDbId, int toType, int toNo, int toSubno, int toIditem, CielaService.ReferenceFromButtonsEnum buttonType, int itemsPerPage, int pageIndex, string idIcons, string sortField, bool isDesc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ItemRefsFromGetCount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> ItemRefsFromGetCountAsync(string key, int toIdna, CielaService.ProductsDbNameEnum toDbId, int toType, int toNo, int toSubno, int toIditem, CielaService.ReferenceFromButtonsEnum buttonType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ItemRefsFromGetGroups", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> ItemRefsFromGetGroupsAsync(string key, int toIdna, CielaService.ProductsDbNameEnum toDbId, int toType, int toNo, int toSubno, int toIditem, CielaService.ReferenceFromButtonsEnum buttonType, int itemsPerPage, string idIcons);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ItemRefsFromGetByYear", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> ItemRefsFromGetByYearAsync(string key, int toIdna, CielaService.ProductsDbNameEnum toDbId, int toType, int toNo, int toSubno, int toIditem, CielaService.ReferenceFromButtonsEnum buttonType, int itemsPerPage, int pageIndex, int year, string sortField, bool isDesc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ItemRefsFromGetItems", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> ItemRefsFromGetItemsAsync(string key, int toIdna, CielaService.ProductsDbNameEnum toDbId, int fromIdna, int toType, int toNo, int toSubno, int toIditem, CielaService.ReferenceFromButtonsEnum buttonType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetReferenceCountToDocument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetReferenceCountToDocumentAsync(string key, int toIdna, int[] buttonType, int[] idIcon);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentRefsFromGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DocumentRefsFromGetAsync(string key, int toIdna, CielaService.ProductsDbNameEnum toDbId, CielaService.ReferenceFromButtonsEnum buttonType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentRefsFromGetByPage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DocumentRefsFromGetByPageAsync(string key, int toIdna, CielaService.ProductsDbNameEnum toDbId, CielaService.ReferenceFromButtonsEnum buttonType, int itemsPerPage, int pageIndex, string idIcons);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentSortedRefsFromGetByPage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DocumentSortedRefsFromGetByPageAsync(string key, int toIdna, CielaService.ProductsDbNameEnum toDbId, CielaService.ReferenceFromButtonsEnum buttonType, int itemsPerPage, int pageIndex, string idIcons, string sortField, bool isDesc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentRefsFromGetCount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DocumentRefsFromGetCountAsync(string key, int toIdna, CielaService.ProductsDbNameEnum toDbId, CielaService.ReferenceFromButtonsEnum buttonType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentRefsFromGetGroups", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DocumentRefsFromGetGroupsAsync(string key, int toIdna, CielaService.ProductsDbNameEnum toDbId, CielaService.ReferenceFromButtonsEnum buttonType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentRefsFromGetByYear", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DocumentRefsFromGetByYearAsync(string key, int toIdna, CielaService.ProductsDbNameEnum toDbId, CielaService.ReferenceFromButtonsEnum buttonType, int itemsPerPage, int pageIndex, int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentSortedRefsFromGetByYear", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DocumentSortedRefsFromGetByYearAsync(string key, int toIdna, CielaService.ProductsDbNameEnum toDbId, CielaService.ReferenceFromButtonsEnum buttonType, int itemsPerPage, int pageIndex, int year, string sortField, bool isDesc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentRefsFromGetItems", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DocumentRefsFromGetItemsAsync(string key, int toIdna, CielaService.ProductsDbNameEnum toDbId, CielaService.ReferenceFromButtonsEnum buttonType, int fromIdna);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentRefsToGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DocumentRefsToGetAsync(string key, int idna);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentRefsToGetByPage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DocumentRefsToGetByPageAsync(string key, int idna, CielaService.ProductsDbNameEnum dbId, int itemsPerPage, int pageIndex, string idIcons);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentSortedRefsToGetByPage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DocumentSortedRefsToGetByPageAsync(string key, int idna, CielaService.ProductsDbNameEnum dbId, int itemsPerPage, int pageIndex, string idIcons, string sortField, bool isDesc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentRefsToGetCount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DocumentRefsToGetCountAsync(string key, int idna, CielaService.ProductsDbNameEnum dbId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentRefsToGetGroups", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DocumentRefsToGetGroupsAsync(string key, int idna, CielaService.ProductsDbNameEnum dbId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentRefsToGetItems", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DocumentRefsToGetItemsAsync(string key, int idna, int toIdna);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentInfoGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DocumentInfoGetAsync(string key, int IDNA);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentAuthorsGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DocumentAuthorsGetAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RefInfoGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> RefInfoGetAsync(string key, int IDREF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DbActualityInfoGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DbActualityInfoGetAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentIdnasGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DocumentIdnasGetAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentHistoryGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DocumentHistoryGetAsync(string key, int IDNA);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentDatesGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DocumentDatesGetAsync(string key, int IDNA);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentTypesGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.ArrayOfXElement> DocumentTypesGetAsync(int[] idnaList, bool useTempTable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentCreate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.DocumentCreateResponse> DocumentCreateAsync(CielaService.DocumentCreateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateTypesAndIconOfDocument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> UpdateTypesAndIconOfDocumentAsync(string key, int idna, CielaService.DatabasesEditableEnum dbId, int idIcon, int[] docTypesAdd, int[] docTypesRemove, string idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateTypesOfDocument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> UpdateTypesOfDocumentAsync(string key, int idna, CielaService.DatabasesEditableEnum dbId, int[] docTypesAdd, int[] docTypesRemove, string idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentUpdate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.DocumentUpdateResponse> DocumentUpdateAsync(CielaService.DocumentUpdateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentDelete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DocumentDeleteAsync(string key, int idna, CielaService.DatabasesEditableEnum dbId, string idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentUserNotesGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DocumentUserNotesGetAsync(string key, int IDNA);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentNearActsGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DocumentNearActsGetAsync(string key, int IDNA);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentEditionUserNotesGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DocumentEditionUserNotesGetAsync(string key, int IDNA, int IDSTR, int IDITEM);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCurrentUpdateItemRefsFromButtons", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetCurrentUpdateItemRefsFromButtonsAsync(CielaService.DatabasesEditableEnum dbId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateItemRefsFromButtons", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task UpdateItemRefsFromButtonsAsync(CielaService.DatabasesEditableEnum dbId, string idUser);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentDisplayEdit", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.DocumentDisplayEditResponse> DocumentDisplayEditAsync(CielaService.DocumentDisplayEditRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentCreateEdit", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.DocumentCreateEditResponse> DocumentCreateEditAsync(CielaService.DocumentCreateEditRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentUpdateEdit", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.DocumentUpdateEditResponse> DocumentUpdateEditAsync(CielaService.DocumentUpdateEditRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentDeleteEdit", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DocumentDeleteEditAsync(string key, int idna, CielaService.DatabasesEditableEnum dbId, string idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentUnlockEdit", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.DocumentUnlockEditResponse> DocumentUnlockEditAsync(CielaService.DocumentUnlockEditRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentInfoGetEdit", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.DocumentInfoGetEditResponse> DocumentInfoGetEditAsync(CielaService.DocumentInfoGetEditRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TempDocumentsListGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.TempDocumentsListGetResponse> TempDocumentsListGetAsync(CielaService.TempDocumentsListGetRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TempDocumentCommit", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.TempDocumentCommitResponse> TempDocumentCommitAsync(CielaService.TempDocumentCommitRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentTypesListGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DocumentTypesListGetAsync(string key, CielaService.DatabasesEditableEnum dbId);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentTypeCreate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.DocumentTypeCreateResponse> DocumentTypeCreateAsync(CielaService.DocumentTypeCreateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentTypeUpdate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DocumentTypeUpdateAsync(string key, int doctype, int idTypeInfo, int sortno, string name, int weight, string idUser, CielaService.DatabasesEditableEnum dbId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentTypeDelete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DocumentTypeDeleteAsync(string key, int doctype, string idUser, CielaService.DatabasesEditableEnum dbId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocTypesIconListGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DocTypesIconListGetAsync(string key, CielaService.DatabasesEditableEnum dbId);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocTypeIconCreate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.DocTypeIconCreateResponse> DocTypeIconCreateAsync(CielaService.DocTypeIconCreateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocTypeIconUpdate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DocTypeIconUpdateAsync(string key, int id, int idIcon, int doctype, int weight, int priority, int attrib, CielaService.DatabasesEditableEnum dbId, string idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocTypeIconDelete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DocTypeIconDeleteAsync(string key, int id, CielaService.DatabasesEditableEnum dbId, string idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocIconsListGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DocIconsListGetAsync(string key, CielaService.DatabasesEditableEnum dbId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentsWithTypeAndDatesGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.DocumentsWithTypeAndDatesGetResponse> DocumentsWithTypeAndDatesGetAsync(CielaService.DocumentsWithTypeAndDatesGetRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/StateGazetteTypesOfChangeGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> StateGazetteTypesOfChangeGetAsync(string key, CielaService.DatabasesEditableEnum dbId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/StateGazetteEditionCreate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.StateGazetteEditionCreateResponse> StateGazetteEditionCreateAsync(CielaService.StateGazetteEditionCreateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/StateGazetteEditionUpdate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.StateGazetteEditionUpdateResponse> StateGazetteEditionUpdateAsync(CielaService.StateGazetteEditionUpdateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/StateGazetteEditionDelete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> StateGazetteEditionDeleteAsync(string key, int idEdition, string idUser, CielaService.DatabasesEditableEnum dbId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/StateGazetteEditionsGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> StateGazetteEditionsGetAsync(string key, int idType, CielaService.DatabasesEditableEnum dbId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/StateGazetteFilterDocumentsGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> StateGazetteFilterDocumentsGetAsync(string key, int startIssue, System.DateTime startDate, int endIssue, System.DateTime endDate, int[] typeOfChanges, int partition, CielaService.DatabasesEditableEnum dbId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DictionarySelect", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DictionarySelectAsync(string key, int IDNA);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ItemNameGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> ItemNameGetAsync(string key, int itemType, int idLang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LegalDefsContentGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> LegalDefsContentGetAsync(string key, CielaService.ProductsDbNameEnum dbId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LegalDefsGetDocs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> LegalDefsGetDocsAsync(string key, int idPhrase, CielaService.ProductsDbNameEnum dbId);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LegalDefsGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.LegalDefsGetResponse> LegalDefsGetAsync(CielaService.LegalDefsGetRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IndexBuild", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> IndexBuildAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IndexUpdate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> IndexUpdateAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SearchTypesGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SearchTypesGetAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SearchTypesUpdate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SearchTypesUpdateAsync(string key, string searchTypes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SearchTypesAdd", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SearchTypesAddAsync(string key, string searchTypes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SearchInTheFuture", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SearchInTheFutureAsync(string key, int searchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CalendarOfTimeLimit", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CalendarOfTimeLimitAsync(string key, System.DateTime startDate, System.DateTime endDate, int period);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentsAbrivGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DocumentsAbrivGetAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentsInForceGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DocumentsInForceGetAsync(string key, System.DateTime fromDate, System.DateTime toDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentsOutForceGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DocumentsOutForceGetAsync(string key, System.DateTime fromDate, System.DateTime toDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentsChangedGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DocumentsChangedGetAsync(string key, System.DateTime fromDate, System.DateTime toDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentsReferToChangedDocumentsGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DocumentsReferToChangedDocumentsGetAsync(string key, System.DateTime fromDate, System.DateTime toDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InvestigationRefsButtonsGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> InvestigationRefsButtonsGetAsync(string key, int idna);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InvestigationRefsTreeGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> InvestigationRefsTreeGetAsync(string key, int idRef);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExpertiziRefsButtonsGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> ExpertiziRefsButtonsGetAsync(string key, int idna);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExpertiziRefsTreeGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> ExpertiziRefsTreeGetAsync(string key, int idRef);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CalculateAllChecksums", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CalculateAllChecksumsAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SearchByPages", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SearchByPagesAsync(string searchPhrase, int offset, int resultsCount, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SortedSearchByPages", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SortedSearchByPagesAsync(string searchPhrase, int offset, int resultsCount, string searchField, bool reverseOorder, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDataForIndexing", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetDataForIndexingAsync(string key, int offset, int limit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetXMLFields", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetXMLFieldsAsync(string key, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SearchCount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SearchCountAsync(string key, string searchPhrase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SearchCount2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SearchCount2Async(string key, string searchPhrase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSearchYearList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetSearchYearListAsync(string key, string searchQuery);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DistributorGetCurrent", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DistributorGetCurrentAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DistributorSaveCurrent", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DistributorSaveCurrentAsync(string key, int id, string info);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DistributorsGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DistributorsGetAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/XmlUpdate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> XmlUpdateAsync(int idna, string xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PrivateAccessList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> PrivateAccessListAsync(string accessKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PrivateAccessDocument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.PrivateAccessDocumentResponse> PrivateAccessDocumentAsync(CielaService.PrivateAccessDocumentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PrivateAccessPdf", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.PrivateAccessPdfResponse> PrivateAccessPdfAsync(CielaService.PrivateAccessPdfRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GerRegistrationStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GerRegistrationStatusAsync(string key, string query);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetLicenseInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetLicenseInfoAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckDocumentLicenseNew", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.CheckDocumentLicenseNew1> CheckDocumentLicenseAsync(CielaService.CheckDocumentLicenseNew request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckDocumentLicense", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.CheckDocumentLicenseResponse> CheckDocumentLicense1Async(CielaService.CheckDocumentLicenseRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PingUserLicense", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task PingUserLicenseAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MigrateFromCiela4Licenses", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<int> MigrateFromCiela4LicensesAsync(string LicenseFile, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ImportCSalesLicenses", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task ImportCSalesLicensesAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Hello", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> HelloAsync(string hello);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TestInitInstance", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> TestInitInstanceAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TermInsert", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<int> TermInsertAsync(string key, int idna, CielaService.ArrayOfXElement termEvent, CielaService.ProductsDbNameEnum dbId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TimeFilteredTermsGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.ArrayOfXElement> TimeFilteredTermsGetAsync(string key, System.DateTime startDate, System.DateTime endDate, CielaService.ProductsDbNameEnum[] dbIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/StructureFilteredTermsGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.ArrayOfXElement> StructureFilteredTermsGetAsync(string key, System.DateTime startDate, System.DateTime endDate, int structureType, CielaService.ProductsDbNameEnum[] dbIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TermUpdate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> TermUpdateAsync(string key, CielaService.ArrayOfXElement termEvent, CielaService.ProductsDbNameEnum dbId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TermDelete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> TermDeleteAsync(string key, int id, CielaService.ProductsDbNameEnum dbId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TermInfoGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CielaService.ArrayOfXElement> TermInfoGetAsync(string key, int idna, CielaService.ProductsDbNameEnum dbId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetItemGroup", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<int> GetItemGroupAsync(string key, int idna, int iditem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDocumentChecksum", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetDocumentChecksumAsync(string key, int idna, CielaService.ProductsDbNameEnum dbId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetLicenceInstallID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task SetLicenceInstallIDAsync(string InstallID, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EuroTreeStructureSelect", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> EuroTreeStructureSelectAsync(string key, int structItemID, string sortOrder, string condition, bool isClientRegime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EuroTreeStructureSelectAll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> EuroTreeStructureSelectAllAsync(string key, bool isClientRegime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EuroTreeStructureContentSelectWithoutDate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> EuroTreeStructureContentSelectWithoutDateAsync(string key, int structItemID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EuroTreeStructureContentSelectCurrentDate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> EuroTreeStructureContentSelectCurrentDateAsync(string key, int structItemID, System.DateTime currentDate);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EuroDocumentDisplay", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class EuroDocumentDisplayRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string key;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int documentID;
        
        public EuroDocumentDisplayRequest()
        {
        }
        
        public EuroDocumentDisplayRequest(string key, int documentID)
        {
            this.key = key;
            this.documentID = documentID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EuroDocumentDisplayResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class EuroDocumentDisplayResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] EuroDocumentDisplayResult;
        
        public EuroDocumentDisplayResponse()
        {
        }
        
        public EuroDocumentDisplayResponse(byte[] EuroDocumentDisplayResult)
        {
            this.EuroDocumentDisplayResult = EuroDocumentDisplayResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="OfficialJournalEditionCreate", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class OfficialJournalEditionCreateRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string key;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int partition;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> date;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public int issue;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public int idType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public string idUser;
        
        public OfficialJournalEditionCreateRequest()
        {
        }
        
        public OfficialJournalEditionCreateRequest(string key, int partition, System.Nullable<System.DateTime> date, int issue, int idType, string idUser)
        {
            this.key = key;
            this.partition = partition;
            this.date = date;
            this.issue = issue;
            this.idType = idType;
            this.idUser = idUser;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="OfficialJournalEditionCreateResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class OfficialJournalEditionCreateResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string OfficialJournalEditionCreateResult;
        
        public OfficialJournalEditionCreateResponse()
        {
        }
        
        public OfficialJournalEditionCreateResponse(string OfficialJournalEditionCreateResult)
        {
            this.OfficialJournalEditionCreateResult = OfficialJournalEditionCreateResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="OfficialJournalEditionUpdate", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class OfficialJournalEditionUpdateRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string key;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int idEdition;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public int partition;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> date;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public int issue;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public int idType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public string idUser;
        
        public OfficialJournalEditionUpdateRequest()
        {
        }
        
        public OfficialJournalEditionUpdateRequest(string key, int idEdition, int partition, System.Nullable<System.DateTime> date, int issue, int idType, string idUser)
        {
            this.key = key;
            this.idEdition = idEdition;
            this.partition = partition;
            this.date = date;
            this.issue = issue;
            this.idType = idType;
            this.idUser = idUser;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="OfficialJournalEditionUpdateResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class OfficialJournalEditionUpdateResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string OfficialJournalEditionUpdateResult;
        
        public OfficialJournalEditionUpdateResponse()
        {
        }
        
        public OfficialJournalEditionUpdateResponse(string OfficialJournalEditionUpdateResult)
        {
            this.OfficialJournalEditionUpdateResult = OfficialJournalEditionUpdateResult;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class DocumentIcon
    {
        
        private int documentIdField;
        
        private System.Nullable<int> iconIdField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int DocumentId
        {
            get
            {
                return this.documentIdField;
            }
            set
            {
                this.documentIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=1)]
        public System.Nullable<int> IconId
        {
            get
            {
                return this.iconIdField;
            }
            set
            {
                this.iconIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class UserMessageRecord
    {
        
        private int idField;
        
        private string htmlField;
        
        private string titleField;
        
        private string mesTypeField;
        
        private string priorityField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Html
        {
            get
            {
                return this.htmlField;
            }
            set
            {
                this.htmlField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Title
        {
            get
            {
                return this.titleField;
            }
            set
            {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string MesType
        {
            get
            {
                return this.mesTypeField;
            }
            set
            {
                this.mesTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string Priority
        {
            get
            {
                return this.priorityField;
            }
            set
            {
                this.priorityField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class PreviousBlankRecord
    {
        
        private string recordIdField;
        
        private string nameField;
        
        private string dateField;
        
        private string commentField;
        
        private string dataField;
        
        private int blankIdField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string RecordId
        {
            get
            {
                return this.recordIdField;
            }
            set
            {
                this.recordIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Date
        {
            get
            {
                return this.dateField;
            }
            set
            {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Comment
        {
            get
            {
                return this.commentField;
            }
            set
            {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string Data
        {
            get
            {
                return this.dataField;
            }
            set
            {
                this.dataField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public int BlankId
        {
            get
            {
                return this.blankIdField;
            }
            set
            {
                this.blankIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class SerializableKeyValuePairOfStringString
    {
        
        private string keyField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Key
        {
            get
            {
                return this.keyField;
            }
            set
            {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetNormiDocumentIcons", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetNormiDocumentIconsRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int[] documentIds;
        
        public GetNormiDocumentIconsRequest()
        {
        }
        
        public GetNormiDocumentIconsRequest(int[] documentIds)
        {
            this.documentIds = documentIds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetNormiDocumentIconsResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetNormiDocumentIconsResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public CielaService.DocumentIcon[] GetNormiDocumentIconsResult;
        
        public GetNormiDocumentIconsResponse()
        {
        }
        
        public GetNormiDocumentIconsResponse(CielaService.DocumentIcon[] GetNormiDocumentIconsResult)
        {
            this.GetNormiDocumentIconsResult = GetNormiDocumentIconsResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InfoDocumentDisplay", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InfoDocumentDisplayRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string key;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string idBase;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public int documentID;
        
        public InfoDocumentDisplayRequest()
        {
        }
        
        public InfoDocumentDisplayRequest(string key, string idBase, int documentID)
        {
            this.key = key;
            this.idBase = idBase;
            this.documentID = documentID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InfoDocumentDisplayResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InfoDocumentDisplayResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] InfoDocumentDisplayResult;
        
        public InfoDocumentDisplayResponse()
        {
        }
        
        public InfoDocumentDisplayResponse(byte[] InfoDocumentDisplayResult)
        {
            this.InfoDocumentDisplayResult = InfoDocumentDisplayResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InfoDocumentDisplayUIC", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InfoDocumentDisplayUICRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string key;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string idBase;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string UIC;
        
        public InfoDocumentDisplayUICRequest()
        {
        }
        
        public InfoDocumentDisplayUICRequest(string key, string idBase, string UIC)
        {
            this.key = key;
            this.idBase = idBase;
            this.UIC = UIC;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InfoDocumentDisplayUICResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InfoDocumentDisplayUICResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] InfoDocumentDisplayUICResult;
        
        public InfoDocumentDisplayUICResponse()
        {
        }
        
        public InfoDocumentDisplayUICResponse(byte[] InfoDocumentDisplayUICResult)
        {
            this.InfoDocumentDisplayUICResult = InfoDocumentDisplayUICResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="NeoficIssueDisplay", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class NeoficIssueDisplayRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string key;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int issueID;
        
        public NeoficIssueDisplayRequest()
        {
        }
        
        public NeoficIssueDisplayRequest(string key, int issueID)
        {
            this.key = key;
            this.issueID = issueID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="NeoficIssueDisplayResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class NeoficIssueDisplayResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] NeoficIssueDisplayResult;
        
        public NeoficIssueDisplayResponse()
        {
        }
        
        public NeoficIssueDisplayResponse(byte[] NeoficIssueDisplayResult)
        {
            this.NeoficIssueDisplayResult = NeoficIssueDisplayResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="NeoficGetIssue", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class NeoficGetIssueRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string key;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int issueNumber;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public int issueYear;
        
        public NeoficGetIssueRequest()
        {
        }
        
        public NeoficGetIssueRequest(string key, int issueNumber, int issueYear)
        {
            this.key = key;
            this.issueNumber = issueNumber;
            this.issueYear = issueYear;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="NeoficGetIssueResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class NeoficGetIssueResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] NeoficGetIssueResult;
        
        public NeoficGetIssueResponse()
        {
        }
        
        public NeoficGetIssueResponse(byte[] NeoficGetIssueResult)
        {
            this.NeoficGetIssueResult = NeoficGetIssueResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PracticeDocumentDisplay", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class PracticeDocumentDisplayRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string key;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int documentID;
        
        public PracticeDocumentDisplayRequest()
        {
        }
        
        public PracticeDocumentDisplayRequest(string key, int documentID)
        {
            this.key = key;
            this.documentID = documentID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PracticeDocumentDisplayResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class PracticeDocumentDisplayResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] PracticeDocumentDisplayResult;
        
        public PracticeDocumentDisplayResponse()
        {
        }
        
        public PracticeDocumentDisplayResponse(byte[] PracticeDocumentDisplayResult)
        {
            this.PracticeDocumentDisplayResult = PracticeDocumentDisplayResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CalculateReminderEvents", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CalculateReminderEventsRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string key;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string owner_user;
        
        public CalculateReminderEventsRequest()
        {
        }
        
        public CalculateReminderEventsRequest(string key, string owner_user)
        {
            this.key = key;
            this.owner_user = owner_user;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CalculateReminderEventsResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CalculateReminderEventsResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] CalculateReminderEventsResult;
        
        public CalculateReminderEventsResponse()
        {
        }
        
        public CalculateReminderEventsResponse(byte[] CalculateReminderEventsResult)
        {
            this.CalculateReminderEventsResult = CalculateReminderEventsResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UpdateBlobFields", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UpdateBlobFieldsRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string key;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int productID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string tableName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string columnNameBlob;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string columnNameIDNA;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] buff;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public int idna;
        
        public UpdateBlobFieldsRequest()
        {
        }
        
        public UpdateBlobFieldsRequest(string key, int productID, string tableName, string columnNameBlob, string columnNameIDNA, byte[] buff, int idna)
        {
            this.key = key;
            this.productID = productID;
            this.tableName = tableName;
            this.columnNameBlob = columnNameBlob;
            this.columnNameIDNA = columnNameIDNA;
            this.buff = buff;
            this.idna = idna;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UpdateBlobFieldsResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UpdateBlobFieldsResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int UpdateBlobFieldsResult;
        
        public UpdateBlobFieldsResponse()
        {
        }
        
        public UpdateBlobFieldsResponse(int UpdateBlobFieldsResult)
        {
            this.UpdateBlobFieldsResult = UpdateBlobFieldsResult;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.w3.org/2001/XMLSchema")]
    public partial class schema
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ExportNotes", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ExportNotesRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string userName;
        
        public ExportNotesRequest()
        {
        }
        
        public ExportNotesRequest(string userName)
        {
            this.userName = userName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ExportNotesResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ExportNotesResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] ExportNotesResult;
        
        public ExportNotesResponse()
        {
        }
        
        public ExportNotesResponse(byte[] ExportNotesResult)
        {
            this.ExportNotesResult = ExportNotesResult;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum RegisterProductResult
    {
        
        /// <remarks/>
        RegistrationOK,
        
        /// <remarks/>
        InvalidRegistrationCode,
        
        /// <remarks/>
        Invalid_HID,
        
        /// <remarks/>
        Invalid_InstallID,
        
        /// <remarks/>
        FailedToSaveFile,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="XSLTInsert", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class XSLTInsertRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string key;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string xsltText;
        
        public XSLTInsertRequest()
        {
        }
        
        public XSLTInsertRequest(string key, string xsltText)
        {
            this.key = key;
            this.xsltText = xsltText;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="XSLTInsertResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class XSLTInsertResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] XSLTInsertResult;
        
        public XSLTInsertResponse()
        {
        }
        
        public XSLTInsertResponse(byte[] XSLTInsertResult)
        {
            this.XSLTInsertResult = XSLTInsertResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="XSLTSelect", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class XSLTSelectRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string key;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int xsltID;
        
        public XSLTSelectRequest()
        {
        }
        
        public XSLTSelectRequest(string key, int xsltID)
        {
            this.key = key;
            this.xsltID = xsltID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="XSLTSelectResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class XSLTSelectResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] XSLTSelectResult;
        
        public XSLTSelectResponse()
        {
        }
        
        public XSLTSelectResponse(byte[] XSLTSelectResult)
        {
            this.XSLTSelectResult = XSLTSelectResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="XSLTUpdate", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class XSLTUpdateRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string key;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int xsltID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string xsltText;
        
        public XSLTUpdateRequest()
        {
        }
        
        public XSLTUpdateRequest(string key, int xsltID, string xsltText)
        {
            this.key = key;
            this.xsltID = xsltID;
            this.xsltText = xsltText;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="XSLTUpdateResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class XSLTUpdateResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] XSLTUpdateResult;
        
        public XSLTUpdateResponse()
        {
        }
        
        public XSLTUpdateResponse(byte[] XSLTUpdateResult)
        {
            this.XSLTUpdateResult = XSLTUpdateResult;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum DatabasesEditableEnum
    {
        
        /// <remarks/>
        Normi,
        
        /// <remarks/>
        Euro,
        
        /// <remarks/>
        Practice,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="TempDocumentInfoGet", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class TempDocumentInfoGetRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string key;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int idna;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public CielaService.DatabasesEditableEnum dbId;
        
        public TempDocumentInfoGetRequest()
        {
        }
        
        public TempDocumentInfoGetRequest(string key, int idna, CielaService.DatabasesEditableEnum dbId)
        {
            this.key = key;
            this.idna = idna;
            this.dbId = dbId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="TempDocumentInfoGetResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class TempDocumentInfoGetResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string TempDocumentInfoGetResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] docData;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] docInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> firstLoad;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> lastAction;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public string usageHistory;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public string idUser;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=7)]
        public bool isLocked;
        
        public TempDocumentInfoGetResponse()
        {
        }
        
        public TempDocumentInfoGetResponse(string TempDocumentInfoGetResult, byte[] docData, byte[] docInfo, System.Nullable<System.DateTime> firstLoad, System.Nullable<System.DateTime> lastAction, string usageHistory, string idUser, bool isLocked)
        {
            this.TempDocumentInfoGetResult = TempDocumentInfoGetResult;
            this.docData = docData;
            this.docInfo = docInfo;
            this.firstLoad = firstLoad;
            this.lastAction = lastAction;
            this.usageHistory = usageHistory;
            this.idUser = idUser;
            this.isLocked = isLocked;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DocumentLegalDefCreate", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DocumentLegalDefCreateRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string key;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int fromIdna;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public int fromIditem;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public int fromType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public int fromNo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public int fromSubNo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public string phrase;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=7)]
        public string idUser;
        
        public DocumentLegalDefCreateRequest()
        {
        }
        
        public DocumentLegalDefCreateRequest(string key, int fromIdna, int fromIditem, int fromType, int fromNo, int fromSubNo, string phrase, string idUser)
        {
            this.key = key;
            this.fromIdna = fromIdna;
            this.fromIditem = fromIditem;
            this.fromType = fromType;
            this.fromNo = fromNo;
            this.fromSubNo = fromSubNo;
            this.phrase = phrase;
            this.idUser = idUser;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DocumentLegalDefCreateResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DocumentLegalDefCreateResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string DocumentLegalDefCreateResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int idRef;
        
        public DocumentLegalDefCreateResponse()
        {
        }
        
        public DocumentLegalDefCreateResponse(string DocumentLegalDefCreateResult, int idRef)
        {
            this.DocumentLegalDefCreateResult = DocumentLegalDefCreateResult;
            this.idRef = idRef;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DocumentReferencesCreate", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DocumentReferencesCreateRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string key;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int refType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public int toIdna;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public int toIdstr;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public int toIditem;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public int toType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public int toNo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=7)]
        public int toSubNo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=8)]
        public int fromIdna;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=9)]
        public int fromIdstr;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=10)]
        public int fromIditem;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=11)]
        public int fromType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=12)]
        public int fromNo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=13)]
        public int fromSubNo;
        
        public DocumentReferencesCreateRequest()
        {
        }
        
        public DocumentReferencesCreateRequest(string key, int refType, int toIdna, int toIdstr, int toIditem, int toType, int toNo, int toSubNo, int fromIdna, int fromIdstr, int fromIditem, int fromType, int fromNo, int fromSubNo)
        {
            this.key = key;
            this.refType = refType;
            this.toIdna = toIdna;
            this.toIdstr = toIdstr;
            this.toIditem = toIditem;
            this.toType = toType;
            this.toNo = toNo;
            this.toSubNo = toSubNo;
            this.fromIdna = fromIdna;
            this.fromIdstr = fromIdstr;
            this.fromIditem = fromIditem;
            this.fromType = fromType;
            this.fromNo = fromNo;
            this.fromSubNo = fromSubNo;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DocumentReferencesCreateResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DocumentReferencesCreateResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string DocumentReferencesCreateResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int idRef;
        
        public DocumentReferencesCreateResponse()
        {
        }
        
        public DocumentReferencesCreateResponse(string DocumentReferencesCreateResult, int idRef)
        {
            this.DocumentReferencesCreateResult = DocumentReferencesCreateResult;
            this.idRef = idRef;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DocumentEditionCreate", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DocumentEditionCreateRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string key;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int idna;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public int idstr;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public object editionDate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public int editionIssue;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public int editionType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public int typeOfChange;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=7)]
        public int transIdna;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=8)]
        public int transIdstr;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=9)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] docText;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=10)]
        public string idUser;
        
        public DocumentEditionCreateRequest()
        {
        }
        
        public DocumentEditionCreateRequest(string key, int idna, int idstr, object editionDate, int editionIssue, int editionType, int typeOfChange, int transIdna, int transIdstr, byte[] docText, string idUser)
        {
            this.key = key;
            this.idna = idna;
            this.idstr = idstr;
            this.editionDate = editionDate;
            this.editionIssue = editionIssue;
            this.editionType = editionType;
            this.typeOfChange = typeOfChange;
            this.transIdna = transIdna;
            this.transIdstr = transIdstr;
            this.docText = docText;
            this.idUser = idUser;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DocumentEditionCreateResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DocumentEditionCreateResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string DocumentEditionCreateResult;
        
        public DocumentEditionCreateResponse()
        {
        }
        
        public DocumentEditionCreateResponse(string DocumentEditionCreateResult)
        {
            this.DocumentEditionCreateResult = DocumentEditionCreateResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DocumentEditionUpdateDocText", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DocumentEditionUpdateDocTextRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string key;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int idna;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] docText;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string idUser;
        
        public DocumentEditionUpdateDocTextRequest()
        {
        }
        
        public DocumentEditionUpdateDocTextRequest(string key, int idna, byte[] docText, string idUser)
        {
            this.key = key;
            this.idna = idna;
            this.docText = docText;
            this.idUser = idUser;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DocumentEditionUpdateDocTextResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DocumentEditionUpdateDocTextResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string DocumentEditionUpdateDocTextResult;
        
        public DocumentEditionUpdateDocTextResponse()
        {
        }
        
        public DocumentEditionUpdateDocTextResponse(string DocumentEditionUpdateDocTextResult)
        {
            this.DocumentEditionUpdateDocTextResult = DocumentEditionUpdateDocTextResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DocumentDisplay", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DocumentDisplayRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string key;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int documentID;
        
        public DocumentDisplayRequest()
        {
        }
        
        public DocumentDisplayRequest(string key, int documentID)
        {
            this.key = key;
            this.documentID = documentID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DocumentDisplayResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DocumentDisplayResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DocumentDisplayResult;
        
        public DocumentDisplayResponse()
        {
        }
        
        public DocumentDisplayResponse(byte[] DocumentDisplayResult)
        {
            this.DocumentDisplayResult = DocumentDisplayResult;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum ProductsDbNameEnum
    {
        
        /// <remarks/>
        dbNormi,
        
        /// <remarks/>
        dbEuro,
        
        /// <remarks/>
        dbTRegister,
        
        /// <remarks/>
        dbBulstat,
        
        /// <remarks/>
        dbDelfi,
        
        /// <remarks/>
        dbInfo,
        
        /// <remarks/>
        dbNeofic,
        
        /// <remarks/>
        dbPractice,
        
        /// <remarks/>
        dbSystem,
        
        /// <remarks/>
        dbUser,
        
        /// <remarks/>
        dbUserNotes,
        
        /// <remarks/>
        SecurityBaseConnectionString,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum ReferenceFromButtonsEnum
    {
        
        /// <remarks/>
        RefsFromActs,
        
        /// <remarks/>
        RefsFromPractice,
        
        /// <remarks/>
        RefsToDocument,
        
        /// <remarks/>
        RefsFromEuroToNormi,
        
        /// <remarks/>
        RefsFromNormiToEuro,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DocumentCreate", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DocumentCreateRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string key;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public CielaService.DatabasesEditableEnum dbId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string title;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public int idLang;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public int idIcon;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public object publishDate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public object inforceDate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=7)]
        public object repealDate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=8)]
        public object outforceDate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=9)]
        public string abriv;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=10)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] docText;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=11)]
        public object editionDate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=12)]
        public int editionIssue;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=13)]
        public int editionType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=14)]
        public int typeOfChange;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=15)]
        public int[] docTypes;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=16)]
        public int transIdna;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=17)]
        public int transIdstr;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=18)]
        public string idUser;
        
        public DocumentCreateRequest()
        {
        }
        
        public DocumentCreateRequest(
                    string key, 
                    CielaService.DatabasesEditableEnum dbId, 
                    string title, 
                    int idLang, 
                    int idIcon, 
                    object publishDate, 
                    object inforceDate, 
                    object repealDate, 
                    object outforceDate, 
                    string abriv, 
                    byte[] docText, 
                    object editionDate, 
                    int editionIssue, 
                    int editionType, 
                    int typeOfChange, 
                    int[] docTypes, 
                    int transIdna, 
                    int transIdstr, 
                    string idUser)
        {
            this.key = key;
            this.dbId = dbId;
            this.title = title;
            this.idLang = idLang;
            this.idIcon = idIcon;
            this.publishDate = publishDate;
            this.inforceDate = inforceDate;
            this.repealDate = repealDate;
            this.outforceDate = outforceDate;
            this.abriv = abriv;
            this.docText = docText;
            this.editionDate = editionDate;
            this.editionIssue = editionIssue;
            this.editionType = editionType;
            this.typeOfChange = typeOfChange;
            this.docTypes = docTypes;
            this.transIdna = transIdna;
            this.transIdstr = transIdstr;
            this.idUser = idUser;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DocumentCreateResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DocumentCreateResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string DocumentCreateResult;
        
        public DocumentCreateResponse()
        {
        }
        
        public DocumentCreateResponse(string DocumentCreateResult)
        {
            this.DocumentCreateResult = DocumentCreateResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DocumentUpdate", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DocumentUpdateRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string key;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int idna;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public CielaService.DatabasesEditableEnum dbId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string title;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public int idLang;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public int idIcon;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public object publishDate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=7)]
        public object inforceDate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=8)]
        public object repealDate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=9)]
        public object outforceDate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=10)]
        public string abriv;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=11)]
        public string celex;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=12)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] docText;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=13)]
        public int[] docTypes;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=14)]
        public string idUser;
        
        public DocumentUpdateRequest()
        {
        }
        
        public DocumentUpdateRequest(string key, int idna, CielaService.DatabasesEditableEnum dbId, string title, int idLang, int idIcon, object publishDate, object inforceDate, object repealDate, object outforceDate, string abriv, string celex, byte[] docText, int[] docTypes, string idUser)
        {
            this.key = key;
            this.idna = idna;
            this.dbId = dbId;
            this.title = title;
            this.idLang = idLang;
            this.idIcon = idIcon;
            this.publishDate = publishDate;
            this.inforceDate = inforceDate;
            this.repealDate = repealDate;
            this.outforceDate = outforceDate;
            this.abriv = abriv;
            this.celex = celex;
            this.docText = docText;
            this.docTypes = docTypes;
            this.idUser = idUser;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DocumentUpdateResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DocumentUpdateResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string DocumentUpdateResult;
        
        public DocumentUpdateResponse()
        {
        }
        
        public DocumentUpdateResponse(string DocumentUpdateResult)
        {
            this.DocumentUpdateResult = DocumentUpdateResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DocumentDisplayEdit", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DocumentDisplayEditRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string key;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int idna;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string idUser;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public CielaService.DatabasesEditableEnum dbId;
        
        public DocumentDisplayEditRequest()
        {
        }
        
        public DocumentDisplayEditRequest(string key, int idna, string idUser, CielaService.DatabasesEditableEnum dbId)
        {
            this.key = key;
            this.idna = idna;
            this.idUser = idUser;
            this.dbId = dbId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DocumentDisplayEditResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DocumentDisplayEditResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string DocumentDisplayEditResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] docData;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] docInfo;
        
        public DocumentDisplayEditResponse()
        {
        }
        
        public DocumentDisplayEditResponse(string DocumentDisplayEditResult, byte[] docData, byte[] docInfo)
        {
            this.DocumentDisplayEditResult = DocumentDisplayEditResult;
            this.docData = docData;
            this.docInfo = docInfo;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DocumentCreateEdit", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DocumentCreateEditRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string key;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string idUser;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] docData;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] docInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public CielaService.DatabasesEditableEnum dbId;
        
        public DocumentCreateEditRequest()
        {
        }
        
        public DocumentCreateEditRequest(string key, string idUser, byte[] docData, byte[] docInfo, CielaService.DatabasesEditableEnum dbId)
        {
            this.key = key;
            this.idUser = idUser;
            this.docData = docData;
            this.docInfo = docInfo;
            this.dbId = dbId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DocumentCreateEditResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DocumentCreateEditResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public CielaService.ArrayOfXElement DocumentCreateEditResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int idna;
        
        public DocumentCreateEditResponse()
        {
        }
        
        public DocumentCreateEditResponse(CielaService.ArrayOfXElement DocumentCreateEditResult, int idna)
        {
            this.DocumentCreateEditResult = DocumentCreateEditResult;
            this.idna = idna;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DocumentUpdateEdit", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DocumentUpdateEditRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string key;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int idna;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public CielaService.DatabasesEditableEnum dbId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string idUser;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] docData;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] docInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public CielaService.ArrayOfXElement docImages;
        
        public DocumentUpdateEditRequest()
        {
        }
        
        public DocumentUpdateEditRequest(string key, int idna, CielaService.DatabasesEditableEnum dbId, string idUser, byte[] docData, byte[] docInfo, CielaService.ArrayOfXElement docImages)
        {
            this.key = key;
            this.idna = idna;
            this.dbId = dbId;
            this.idUser = idUser;
            this.docData = docData;
            this.docInfo = docInfo;
            this.docImages = docImages;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DocumentUpdateEditResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DocumentUpdateEditResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string DocumentUpdateEditResult;
        
        public DocumentUpdateEditResponse()
        {
        }
        
        public DocumentUpdateEditResponse(string DocumentUpdateEditResult)
        {
            this.DocumentUpdateEditResult = DocumentUpdateEditResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DocumentUnlockEdit", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DocumentUnlockEditRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string key;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfInt")]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false, NestingLevel=1)]
        public int[][] docIdDbIdPairs;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string idUser;
        
        public DocumentUnlockEditRequest()
        {
        }
        
        public DocumentUnlockEditRequest(string key, int[][] docIdDbIdPairs, string idUser)
        {
            this.key = key;
            this.docIdDbIdPairs = docIdDbIdPairs;
            this.idUser = idUser;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DocumentUnlockEditResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DocumentUnlockEditResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string DocumentUnlockEditResult;
        
        public DocumentUnlockEditResponse()
        {
        }
        
        public DocumentUnlockEditResponse(string DocumentUnlockEditResult)
        {
            this.DocumentUnlockEditResult = DocumentUnlockEditResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DocumentInfoGetEdit", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DocumentInfoGetEditRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string key;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int idna;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public CielaService.DatabasesEditableEnum dbId;
        
        public DocumentInfoGetEditRequest()
        {
        }
        
        public DocumentInfoGetEditRequest(string key, int idna, CielaService.DatabasesEditableEnum dbId)
        {
            this.key = key;
            this.idna = idna;
            this.dbId = dbId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DocumentInfoGetEditResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DocumentInfoGetEditResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DocumentInfoGetEditResult;
        
        public DocumentInfoGetEditResponse()
        {
        }
        
        public DocumentInfoGetEditResponse(byte[] DocumentInfoGetEditResult)
        {
            this.DocumentInfoGetEditResult = DocumentInfoGetEditResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="TempDocumentsListGet", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class TempDocumentsListGetRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string key;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfInt")]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false, NestingLevel=1)]
        public int[][] docIdDbIdPairs;
        
        public TempDocumentsListGetRequest()
        {
        }
        
        public TempDocumentsListGetRequest(string key, int[][] docIdDbIdPairs)
        {
            this.key = key;
            this.docIdDbIdPairs = docIdDbIdPairs;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="TempDocumentsListGetResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class TempDocumentsListGetResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string TempDocumentsListGetResult;
        
        public TempDocumentsListGetResponse()
        {
        }
        
        public TempDocumentsListGetResponse(string TempDocumentsListGetResult)
        {
            this.TempDocumentsListGetResult = TempDocumentsListGetResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="TempDocumentCommit", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class TempDocumentCommitRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string key;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfInt")]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false, NestingLevel=1)]
        public int[][] docIdDbIdPairs;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string idUser;
        
        public TempDocumentCommitRequest()
        {
        }
        
        public TempDocumentCommitRequest(string key, int[][] docIdDbIdPairs, string idUser)
        {
            this.key = key;
            this.docIdDbIdPairs = docIdDbIdPairs;
            this.idUser = idUser;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="TempDocumentCommitResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class TempDocumentCommitResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string TempDocumentCommitResult;
        
        public TempDocumentCommitResponse()
        {
        }
        
        public TempDocumentCommitResponse(string TempDocumentCommitResult)
        {
            this.TempDocumentCommitResult = TempDocumentCommitResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DocumentTypeCreate", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DocumentTypeCreateRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string key;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int idTypeInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public int sortno;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string name;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public int weight;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public string idUser;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public CielaService.DatabasesEditableEnum dbId;
        
        public DocumentTypeCreateRequest()
        {
        }
        
        public DocumentTypeCreateRequest(string key, int idTypeInfo, int sortno, string name, int weight, string idUser, CielaService.DatabasesEditableEnum dbId)
        {
            this.key = key;
            this.idTypeInfo = idTypeInfo;
            this.sortno = sortno;
            this.name = name;
            this.weight = weight;
            this.idUser = idUser;
            this.dbId = dbId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DocumentTypeCreateResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DocumentTypeCreateResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string DocumentTypeCreateResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int doctype;
        
        public DocumentTypeCreateResponse()
        {
        }
        
        public DocumentTypeCreateResponse(string DocumentTypeCreateResult, int doctype)
        {
            this.DocumentTypeCreateResult = DocumentTypeCreateResult;
            this.doctype = doctype;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DocTypeIconCreate", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DocTypeIconCreateRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string key;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int idIcon;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public int doctype;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public int weight;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public int priority;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public int attrib;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public CielaService.DatabasesEditableEnum dbId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=7)]
        public string idUser;
        
        public DocTypeIconCreateRequest()
        {
        }
        
        public DocTypeIconCreateRequest(string key, int idIcon, int doctype, int weight, int priority, int attrib, CielaService.DatabasesEditableEnum dbId, string idUser)
        {
            this.key = key;
            this.idIcon = idIcon;
            this.doctype = doctype;
            this.weight = weight;
            this.priority = priority;
            this.attrib = attrib;
            this.dbId = dbId;
            this.idUser = idUser;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DocTypeIconCreateResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DocTypeIconCreateResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string DocTypeIconCreateResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int id;
        
        public DocTypeIconCreateResponse()
        {
        }
        
        public DocTypeIconCreateResponse(string DocTypeIconCreateResult, int id)
        {
            this.DocTypeIconCreateResult = DocTypeIconCreateResult;
            this.id = id;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DocumentsWithTypeAndDatesGet", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DocumentsWithTypeAndDatesGetRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string key;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int[] docTypes;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public int[] docList;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        [System.Xml.Serialization.XmlArrayItemAttribute()]
        public System.Nullable<System.DateTime>[] filterDates;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public CielaService.DatabasesEditableEnum dbId;
        
        public DocumentsWithTypeAndDatesGetRequest()
        {
        }
        
        public DocumentsWithTypeAndDatesGetRequest(string key, int[] docTypes, int[] docList, System.Nullable<System.DateTime>[] filterDates, CielaService.DatabasesEditableEnum dbId)
        {
            this.key = key;
            this.docTypes = docTypes;
            this.docList = docList;
            this.filterDates = filterDates;
            this.dbId = dbId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DocumentsWithTypeAndDatesGetResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DocumentsWithTypeAndDatesGetResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string DocumentsWithTypeAndDatesGetResult;
        
        public DocumentsWithTypeAndDatesGetResponse()
        {
        }
        
        public DocumentsWithTypeAndDatesGetResponse(string DocumentsWithTypeAndDatesGetResult)
        {
            this.DocumentsWithTypeAndDatesGetResult = DocumentsWithTypeAndDatesGetResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="StateGazetteEditionCreate", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class StateGazetteEditionCreateRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string key;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int partition;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> date;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public int issue;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public int idType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public string idUser;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public CielaService.DatabasesEditableEnum dbId;
        
        public StateGazetteEditionCreateRequest()
        {
        }
        
        public StateGazetteEditionCreateRequest(string key, int partition, System.Nullable<System.DateTime> date, int issue, int idType, string idUser, CielaService.DatabasesEditableEnum dbId)
        {
            this.key = key;
            this.partition = partition;
            this.date = date;
            this.issue = issue;
            this.idType = idType;
            this.idUser = idUser;
            this.dbId = dbId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="StateGazetteEditionCreateResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class StateGazetteEditionCreateResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string StateGazetteEditionCreateResult;
        
        public StateGazetteEditionCreateResponse()
        {
        }
        
        public StateGazetteEditionCreateResponse(string StateGazetteEditionCreateResult)
        {
            this.StateGazetteEditionCreateResult = StateGazetteEditionCreateResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="StateGazetteEditionUpdate", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class StateGazetteEditionUpdateRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string key;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int idEdition;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public int partition;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> date;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public int issue;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public int idType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public string idUser;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=7)]
        public CielaService.DatabasesEditableEnum dbId;
        
        public StateGazetteEditionUpdateRequest()
        {
        }
        
        public StateGazetteEditionUpdateRequest(string key, int idEdition, int partition, System.Nullable<System.DateTime> date, int issue, int idType, string idUser, CielaService.DatabasesEditableEnum dbId)
        {
            this.key = key;
            this.idEdition = idEdition;
            this.partition = partition;
            this.date = date;
            this.issue = issue;
            this.idType = idType;
            this.idUser = idUser;
            this.dbId = dbId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="StateGazetteEditionUpdateResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class StateGazetteEditionUpdateResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string StateGazetteEditionUpdateResult;
        
        public StateGazetteEditionUpdateResponse()
        {
        }
        
        public StateGazetteEditionUpdateResponse(string StateGazetteEditionUpdateResult)
        {
            this.StateGazetteEditionUpdateResult = StateGazetteEditionUpdateResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="LegalDefsGet", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class LegalDefsGetRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string key;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int idPhrase;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public CielaService.ProductsDbNameEnum dbId;
        
        public LegalDefsGetRequest()
        {
        }
        
        public LegalDefsGetRequest(string key, int idPhrase, CielaService.ProductsDbNameEnum dbId)
        {
            this.key = key;
            this.idPhrase = idPhrase;
            this.dbId = dbId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="LegalDefsGetResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class LegalDefsGetResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string LegalDefsGetResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] firstDef;
        
        public LegalDefsGetResponse()
        {
        }
        
        public LegalDefsGetResponse(string LegalDefsGetResult, byte[] firstDef)
        {
            this.LegalDefsGetResult = LegalDefsGetResult;
            this.firstDef = firstDef;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PrivateAccessDocument", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class PrivateAccessDocumentRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string accessKey;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int db;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public int id;
        
        public PrivateAccessDocumentRequest()
        {
        }
        
        public PrivateAccessDocumentRequest(string accessKey, int db, int id)
        {
            this.accessKey = accessKey;
            this.db = db;
            this.id = id;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PrivateAccessDocumentResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class PrivateAccessDocumentResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] PrivateAccessDocumentResult;
        
        public PrivateAccessDocumentResponse()
        {
        }
        
        public PrivateAccessDocumentResponse(byte[] PrivateAccessDocumentResult)
        {
            this.PrivateAccessDocumentResult = PrivateAccessDocumentResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PrivateAccessPdf", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class PrivateAccessPdfRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string accessKey;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int db;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public int id;
        
        public PrivateAccessPdfRequest()
        {
        }
        
        public PrivateAccessPdfRequest(string accessKey, int db, int id)
        {
            this.accessKey = accessKey;
            this.db = db;
            this.id = id;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PrivateAccessPdfResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class PrivateAccessPdfResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] PrivateAccessPdfResult;
        
        public PrivateAccessPdfResponse()
        {
        }
        
        public PrivateAccessPdfResponse(byte[] PrivateAccessPdfResult)
        {
            this.PrivateAccessPdfResult = PrivateAccessPdfResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CheckDocumentLicenseNew", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CheckDocumentLicenseNew
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string strDocID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] xml;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string key;
        
        public CheckDocumentLicenseNew()
        {
        }
        
        public CheckDocumentLicenseNew(string strDocID, byte[] xml, string key)
        {
            this.strDocID = strDocID;
            this.xml = xml;
            this.key = key;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CheckDocumentLicenseNewResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CheckDocumentLicenseNew1
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] CheckDocumentLicenseNewResult;
        
        public CheckDocumentLicenseNew1()
        {
        }
        
        public CheckDocumentLicenseNew1(byte[] CheckDocumentLicenseNewResult)
        {
            this.CheckDocumentLicenseNewResult = CheckDocumentLicenseNewResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CheckDocumentLicense", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CheckDocumentLicenseRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string strDocID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string key;
        
        public CheckDocumentLicenseRequest()
        {
        }
        
        public CheckDocumentLicenseRequest(string strDocID, string key)
        {
            this.strDocID = strDocID;
            this.key = key;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CheckDocumentLicenseResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CheckDocumentLicenseResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] CheckDocumentLicenseResult;
        
        public CheckDocumentLicenseResponse()
        {
        }
        
        public CheckDocumentLicenseResponse(byte[] CheckDocumentLicenseResult)
        {
            this.CheckDocumentLicenseResult = CheckDocumentLicenseResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    public interface PlainServiceSoapChannel : CielaService.PlainServiceSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    public partial class PlainServiceSoapClient : System.ServiceModel.ClientBase<CielaService.PlainServiceSoap>, CielaService.PlainServiceSoap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public PlainServiceSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(PlainServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), PlainServiceSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PlainServiceSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(PlainServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PlainServiceSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(PlainServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PlainServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<string> EuroTreeStructureContentSelectAsync(string key, int structItemID, System.DateTime currentDate, System.DateTime offsetDate)
        {
            return base.Channel.EuroTreeStructureContentSelectAsync(key, structItemID, currentDate, offsetDate);
        }
        
        public System.Threading.Tasks.Task<string> EuroOfficialJournalAllEditionsGetAsync(string key, System.DateTime date)
        {
            return base.Channel.EuroOfficialJournalAllEditionsGetAsync(key, date);
        }
        
        public System.Threading.Tasks.Task<string> EuroOfficialJournalContentGetAsync(string key, int idEdition)
        {
            return base.Channel.EuroOfficialJournalContentGetAsync(key, idEdition);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CielaService.EuroDocumentDisplayResponse> CielaService.PlainServiceSoap.EuroDocumentDisplayAsync(CielaService.EuroDocumentDisplayRequest request)
        {
            return base.Channel.EuroDocumentDisplayAsync(request);
        }
        
        public System.Threading.Tasks.Task<CielaService.EuroDocumentDisplayResponse> EuroDocumentDisplayAsync(string key, int documentID)
        {
            CielaService.EuroDocumentDisplayRequest inValue = new CielaService.EuroDocumentDisplayRequest();
            inValue.key = key;
            inValue.documentID = documentID;
            return ((CielaService.PlainServiceSoap)(this)).EuroDocumentDisplayAsync(inValue);
        }
        
        public System.Threading.Tasks.Task<string> EuroDocumentInfoGetAsync(string key, int IDNA)
        {
            return base.Channel.EuroDocumentInfoGetAsync(key, IDNA);
        }
        
        public System.Threading.Tasks.Task<string> EuroRefInfoGetAsync(string key, int IDREF)
        {
            return base.Channel.EuroRefInfoGetAsync(key, IDREF);
        }
        
        public System.Threading.Tasks.Task<string> EuroDbActualityInfoGetAsync(string key)
        {
            return base.Channel.EuroDbActualityInfoGetAsync(key);
        }
        
        public System.Threading.Tasks.Task<string> EuroDocumentIdnasGetAsync(string key)
        {
            return base.Channel.EuroDocumentIdnasGetAsync(key);
        }
        
        public System.Threading.Tasks.Task<string> OfficialJournalTypesOfChangeGetAsync(string key)
        {
            return base.Channel.OfficialJournalTypesOfChangeGetAsync(key);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CielaService.OfficialJournalEditionCreateResponse> CielaService.PlainServiceSoap.OfficialJournalEditionCreateAsync(CielaService.OfficialJournalEditionCreateRequest request)
        {
            return base.Channel.OfficialJournalEditionCreateAsync(request);
        }
        
        public System.Threading.Tasks.Task<CielaService.OfficialJournalEditionCreateResponse> OfficialJournalEditionCreateAsync(string key, int partition, System.Nullable<System.DateTime> date, int issue, int idType, string idUser)
        {
            CielaService.OfficialJournalEditionCreateRequest inValue = new CielaService.OfficialJournalEditionCreateRequest();
            inValue.key = key;
            inValue.partition = partition;
            inValue.date = date;
            inValue.issue = issue;
            inValue.idType = idType;
            inValue.idUser = idUser;
            return ((CielaService.PlainServiceSoap)(this)).OfficialJournalEditionCreateAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CielaService.OfficialJournalEditionUpdateResponse> CielaService.PlainServiceSoap.OfficialJournalEditionUpdateAsync(CielaService.OfficialJournalEditionUpdateRequest request)
        {
            return base.Channel.OfficialJournalEditionUpdateAsync(request);
        }
        
        public System.Threading.Tasks.Task<CielaService.OfficialJournalEditionUpdateResponse> OfficialJournalEditionUpdateAsync(string key, int idEdition, int partition, System.Nullable<System.DateTime> date, int issue, int idType, string idUser)
        {
            CielaService.OfficialJournalEditionUpdateRequest inValue = new CielaService.OfficialJournalEditionUpdateRequest();
            inValue.key = key;
            inValue.idEdition = idEdition;
            inValue.partition = partition;
            inValue.date = date;
            inValue.issue = issue;
            inValue.idType = idType;
            inValue.idUser = idUser;
            return ((CielaService.PlainServiceSoap)(this)).OfficialJournalEditionUpdateAsync(inValue);
        }
        
        public System.Threading.Tasks.Task<string> OfficialJournalEditionDeleteAsync(string key, int idEdition, string idUser)
        {
            return base.Channel.OfficialJournalEditionDeleteAsync(key, idEdition, idUser);
        }
        
        public System.Threading.Tasks.Task<string> OfficialJournalEditionsGetAsync(string key, int idType, int partition)
        {
            return base.Channel.OfficialJournalEditionsGetAsync(key, idType, partition);
        }
        
        public System.Threading.Tasks.Task<string> InfoTreeStructureSelectAllAsync(string key, string idBase)
        {
            return base.Channel.InfoTreeStructureSelectAllAsync(key, idBase);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CielaService.GetNormiDocumentIconsResponse> CielaService.PlainServiceSoap.GetNormiDocumentIconsAsync(CielaService.GetNormiDocumentIconsRequest request)
        {
            return base.Channel.GetNormiDocumentIconsAsync(request);
        }
        
        public System.Threading.Tasks.Task<CielaService.GetNormiDocumentIconsResponse> GetNormiDocumentIconsAsync(int[] documentIds)
        {
            CielaService.GetNormiDocumentIconsRequest inValue = new CielaService.GetNormiDocumentIconsRequest();
            inValue.documentIds = documentIds;
            return ((CielaService.PlainServiceSoap)(this)).GetNormiDocumentIconsAsync(inValue);
        }
        
        public System.Threading.Tasks.Task<string> InfoTreeStructureSelectAsync(string key, string idBase, int structItemID)
        {
            return base.Channel.InfoTreeStructureSelectAsync(key, idBase, structItemID);
        }
        
        public System.Threading.Tasks.Task<string> InfoTreeStructureSelectExtraAsync(string key, string idBase, int structItemID, string sortOrder, string extraCondition)
        {
            return base.Channel.InfoTreeStructureSelectExtraAsync(key, idBase, structItemID, sortOrder, extraCondition);
        }
        
        public System.Threading.Tasks.Task<string> InfoTreeStructureContentSelectAsync(string key, string idBase, int structItemID, int codeEkatte, int legalFormCode, int codeNkid, int bulProofCode)
        {
            return base.Channel.InfoTreeStructureContentSelectAsync(key, idBase, structItemID, codeEkatte, legalFormCode, codeNkid, bulProofCode);
        }
        
        public System.Threading.Tasks.Task<string> InfoTreeStructureContentSelectParamAsync(string key, string idBase, int structItemID, int codeEkatte, int legalFormCode, int codeNkid, int bulProofCode, long selectFirstRows)
        {
            return base.Channel.InfoTreeStructureContentSelectParamAsync(key, idBase, structItemID, codeEkatte, legalFormCode, codeNkid, bulProofCode, selectFirstRows);
        }
        
        public System.Threading.Tasks.Task<string> InfoTreeMainStructureAsync(string key)
        {
            return base.Channel.InfoTreeMainStructureAsync(key);
        }
        
        public System.Threading.Tasks.Task<int> InfoGetAccentStructIDAsync(string key)
        {
            return base.Channel.InfoGetAccentStructIDAsync(key);
        }
        
        public System.Threading.Tasks.Task<string> InfoGetAccentDocumentsAsync(string key)
        {
            return base.Channel.InfoGetAccentDocumentsAsync(key);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CielaService.InfoDocumentDisplayResponse> CielaService.PlainServiceSoap.InfoDocumentDisplayAsync(CielaService.InfoDocumentDisplayRequest request)
        {
            return base.Channel.InfoDocumentDisplayAsync(request);
        }
        
        public System.Threading.Tasks.Task<CielaService.InfoDocumentDisplayResponse> InfoDocumentDisplayAsync(string key, string idBase, int documentID)
        {
            CielaService.InfoDocumentDisplayRequest inValue = new CielaService.InfoDocumentDisplayRequest();
            inValue.key = key;
            inValue.idBase = idBase;
            inValue.documentID = documentID;
            return ((CielaService.PlainServiceSoap)(this)).InfoDocumentDisplayAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CielaService.InfoDocumentDisplayUICResponse> CielaService.PlainServiceSoap.InfoDocumentDisplayUICAsync(CielaService.InfoDocumentDisplayUICRequest request)
        {
            return base.Channel.InfoDocumentDisplayUICAsync(request);
        }
        
        public System.Threading.Tasks.Task<CielaService.InfoDocumentDisplayUICResponse> InfoDocumentDisplayUICAsync(string key, string idBase, string UIC)
        {
            CielaService.InfoDocumentDisplayUICRequest inValue = new CielaService.InfoDocumentDisplayUICRequest();
            inValue.key = key;
            inValue.idBase = idBase;
            inValue.UIC = UIC;
            return ((CielaService.PlainServiceSoap)(this)).InfoDocumentDisplayUICAsync(inValue);
        }
        
        public System.Threading.Tasks.Task<string> InfoDocumentContentAsync(string key, string idBase, int documentID)
        {
            return base.Channel.InfoDocumentContentAsync(key, idBase, documentID);
        }
        
        public System.Threading.Tasks.Task<string> InfoBaseActualDateAsync(string key, string idBase)
        {
            return base.Channel.InfoBaseActualDateAsync(key, idBase);
        }
        
        public System.Threading.Tasks.Task<string> InfoLinkedPersonsAsync(string key, string linkedBase, string personIndentType, string personIndent, string personName, string personCountry, int nLinkedLevel)
        {
            return base.Channel.InfoLinkedPersonsAsync(key, linkedBase, personIndentType, personIndent, personName, personCountry, nLinkedLevel);
        }
        
        public System.Threading.Tasks.Task<string> InfoNOIContentAsync(string key, string bulstat)
        {
            return base.Channel.InfoNOIContentAsync(key, bulstat);
        }
        
        public System.Threading.Tasks.Task<string> InfoDDSContentAsync(string key, string bulstat)
        {
            return base.Channel.InfoDDSContentAsync(key, bulstat);
        }
        
        public System.Threading.Tasks.Task<int> GetIDNAfromUICAsync(string key, string idBase, string UIC)
        {
            return base.Channel.GetIDNAfromUICAsync(key, idBase, UIC);
        }
        
        public System.Threading.Tasks.Task<string> InfoGetDocumentsAsync(string key, string idBase, string docIDNAs)
        {
            return base.Channel.InfoGetDocumentsAsync(key, idBase, docIDNAs);
        }
        
        public System.Threading.Tasks.Task<string> InfoDocumentIdnasGetAsync(string key, string idBase)
        {
            return base.Channel.InfoDocumentIdnasGetAsync(key, idBase);
        }
        
        public System.Threading.Tasks.Task<string> InfoGetNomenclaturesAsync(string key, string idBase)
        {
            return base.Channel.InfoGetNomenclaturesAsync(key, idBase);
        }
        
        public System.Threading.Tasks.Task<string> InfoGetNomenclaturesForSearchingAsync(string key)
        {
            return base.Channel.InfoGetNomenclaturesForSearchingAsync(key);
        }
        
        public System.Threading.Tasks.Task<string> NeoficTreeStructureSelectAsync(string key, int structItemID)
        {
            return base.Channel.NeoficTreeStructureSelectAsync(key, structItemID);
        }
        
        public System.Threading.Tasks.Task<string> NeoficTreeStructureContentSelectAsync(string key, int structItemID, int typeNoticeCode, int authorNoticeCode, int issueIDNA, int actualNotice, int actualPeriod)
        {
            return base.Channel.NeoficTreeStructureContentSelectAsync(key, structItemID, typeNoticeCode, authorNoticeCode, issueIDNA, actualNotice, actualPeriod);
        }
        
        public System.Threading.Tasks.Task<string> NeoficNoticeDisplayAsync(string key, int noticeID)
        {
            return base.Channel.NeoficNoticeDisplayAsync(key, noticeID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CielaService.NeoficIssueDisplayResponse> CielaService.PlainServiceSoap.NeoficIssueDisplayAsync(CielaService.NeoficIssueDisplayRequest request)
        {
            return base.Channel.NeoficIssueDisplayAsync(request);
        }
        
        public System.Threading.Tasks.Task<CielaService.NeoficIssueDisplayResponse> NeoficIssueDisplayAsync(string key, int issueID)
        {
            CielaService.NeoficIssueDisplayRequest inValue = new CielaService.NeoficIssueDisplayRequest();
            inValue.key = key;
            inValue.issueID = issueID;
            return ((CielaService.PlainServiceSoap)(this)).NeoficIssueDisplayAsync(inValue);
        }
        
        public System.Threading.Tasks.Task<string> NeoficNoticesInfoAsync(string key, int issueId, string noticesId)
        {
            return base.Channel.NeoficNoticesInfoAsync(key, issueId, noticesId);
        }
        
        public System.Threading.Tasks.Task<string> NeoficBaseActualDateAsync(string key)
        {
            return base.Channel.NeoficBaseActualDateAsync(key);
        }
        
        public System.Threading.Tasks.Task<string> NeoficDbActualityInfoGetAsync(string key)
        {
            return base.Channel.NeoficDbActualityInfoGetAsync(key);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CielaService.NeoficGetIssueResponse> CielaService.PlainServiceSoap.NeoficGetIssueAsync(CielaService.NeoficGetIssueRequest request)
        {
            return base.Channel.NeoficGetIssueAsync(request);
        }
        
        public System.Threading.Tasks.Task<CielaService.NeoficGetIssueResponse> NeoficGetIssueAsync(string key, int issueNumber, int issueYear)
        {
            CielaService.NeoficGetIssueRequest inValue = new CielaService.NeoficGetIssueRequest();
            inValue.key = key;
            inValue.issueNumber = issueNumber;
            inValue.issueYear = issueYear;
            return ((CielaService.PlainServiceSoap)(this)).NeoficGetIssueAsync(inValue);
        }
        
        public System.Threading.Tasks.Task<string> NeoficDocumentIdnasGetAsync(string key)
        {
            return base.Channel.NeoficDocumentIdnasGetAsync(key);
        }
        
        public System.Threading.Tasks.Task<bool> NormiDocumentExistsAsync(int documentId)
        {
            return base.Channel.NormiDocumentExistsAsync(documentId);
        }
        
        public System.Threading.Tasks.Task<string> GetNewPracticesUrlAsync(string key, string oldUrl)
        {
            return base.Channel.GetNewPracticesUrlAsync(key, oldUrl);
        }
        
        public System.Threading.Tasks.Task<string> GetNormiDocumentLatestEditionAsync(int documentId)
        {
            return base.Channel.GetNormiDocumentLatestEditionAsync(documentId);
        }
        
        public System.Threading.Tasks.Task<string> PracticeDbActualityInfoGetAsync()
        {
            return base.Channel.PracticeDbActualityInfoGetAsync();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CielaService.PracticeDocumentDisplayResponse> CielaService.PlainServiceSoap.PracticeDocumentDisplayAsync(CielaService.PracticeDocumentDisplayRequest request)
        {
            return base.Channel.PracticeDocumentDisplayAsync(request);
        }
        
        public System.Threading.Tasks.Task<CielaService.PracticeDocumentDisplayResponse> PracticeDocumentDisplayAsync(string key, int documentID)
        {
            CielaService.PracticeDocumentDisplayRequest inValue = new CielaService.PracticeDocumentDisplayRequest();
            inValue.key = key;
            inValue.documentID = documentID;
            return ((CielaService.PlainServiceSoap)(this)).PracticeDocumentDisplayAsync(inValue);
        }
        
        public System.Threading.Tasks.Task<string> PracticeDocumentInfoGetAsync(string key, int IDNA)
        {
            return base.Channel.PracticeDocumentInfoGetAsync(key, IDNA);
        }
        
        public System.Threading.Tasks.Task InsertCalcBlankRecordAsync(string key, string userName, int blankId, CielaService.SerializableKeyValuePairOfStringString[] blankInfo, string recordData, CielaService.SerializableKeyValuePairOfStringString[] additionalData)
        {
            return base.Channel.InsertCalcBlankRecordAsync(key, userName, blankId, blankInfo, recordData, additionalData);
        }
        
        public System.Threading.Tasks.Task InsertBlankRecordsAsync(string key, string userName, CielaService.PreviousBlankRecord[] blankRecords)
        {
            return base.Channel.InsertBlankRecordsAsync(key, userName, blankRecords);
        }
        
        public System.Threading.Tasks.Task DeleteOldBlankRecordsAsync(string key, string[] idsOfRecords)
        {
            return base.Channel.DeleteOldBlankRecordsAsync(key, idsOfRecords);
        }
        
        public System.Threading.Tasks.Task<CielaService.PreviousBlankRecord[]> GetCalcBlankPreviousRecordsAsync(string key, string userName, int blankId, int blankDatabase, int blankVersion)
        {
            return base.Channel.GetCalcBlankPreviousRecordsAsync(key, userName, blankId, blankDatabase, blankVersion);
        }
        
        public System.Threading.Tasks.Task<CielaService.PreviousBlankRecord[]> GetAllBlankRecordsAsync(string key, string userName)
        {
            return base.Channel.GetAllBlankRecordsAsync(key, userName);
        }
        
        public System.Threading.Tasks.Task<string> GetSpecificBlankRecordAsync(string key, int recordId)
        {
            return base.Channel.GetSpecificBlankRecordAsync(key, recordId);
        }
        
        public System.Threading.Tasks.Task<CielaService.UserMessageRecord[]> GetMessagesForUserAsync(string key, string userName)
        {
            return base.Channel.GetMessagesForUserAsync(key, userName);
        }
        
        public System.Threading.Tasks.Task SetUserMessagesAsReadAsync(string key, string userName, int[] idsToBeSetAsRead)
        {
            return base.Channel.SetUserMessagesAsReadAsync(key, userName, idsToBeSetAsRead);
        }
        
        public System.Threading.Tasks.Task<CielaService.UserMessageRecord[]> GetAllOneTimeMessagesAsync(string key)
        {
            return base.Channel.GetAllOneTimeMessagesAsync(key);
        }
        
        public System.Threading.Tasks.Task<CielaService.UserMessageRecord> GetSpecificOneTimeMessageAsync(string key, int messageId)
        {
            return base.Channel.GetSpecificOneTimeMessageAsync(key, messageId);
        }
        
        public System.Threading.Tasks.Task InsertNewMessageAsync(string key, CielaService.UserMessageRecord newMessage)
        {
            return base.Channel.InsertNewMessageAsync(key, newMessage);
        }
        
        public System.Threading.Tasks.Task DeleteOneTimeMessageAsync(string key, int messageId)
        {
            return base.Channel.DeleteOneTimeMessageAsync(key, messageId);
        }
        
        public System.Threading.Tasks.Task UpdateOneTimeMessageAsync(string key, CielaService.UserMessageRecord updateMessage)
        {
            return base.Channel.UpdateOneTimeMessageAsync(key, updateMessage);
        }
        
        public System.Threading.Tasks.Task<string> GetReminderDocsAsync(string key, string owner_user, string reminderID)
        {
            return base.Channel.GetReminderDocsAsync(key, owner_user, reminderID);
        }
        
        public System.Threading.Tasks.Task<string> HasReminderEventsAsync(string key, string owner_user)
        {
            return base.Channel.HasReminderEventsAsync(key, owner_user);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CielaService.CalculateReminderEventsResponse> CielaService.PlainServiceSoap.CalculateReminderEventsAsync(CielaService.CalculateReminderEventsRequest request)
        {
            return base.Channel.CalculateReminderEventsAsync(request);
        }
        
        public System.Threading.Tasks.Task<CielaService.CalculateReminderEventsResponse> CalculateReminderEventsAsync(string key, string owner_user)
        {
            CielaService.CalculateReminderEventsRequest inValue = new CielaService.CalculateReminderEventsRequest();
            inValue.key = key;
            inValue.owner_user = owner_user;
            return ((CielaService.PlainServiceSoap)(this)).CalculateReminderEventsAsync(inValue);
        }
        
        public System.Threading.Tasks.Task<string> AddReminderDocsAsync(string key, string owner_user, string docs)
        {
            return base.Channel.AddReminderDocsAsync(key, owner_user, docs);
        }
        
        public System.Threading.Tasks.Task<string> UpdateReminderDocSettingsAsync(string key, string docs)
        {
            return base.Channel.UpdateReminderDocSettingsAsync(key, docs);
        }
        
        public System.Threading.Tasks.Task<string> DeleteReminderDocsAsync(string key, string owner_user, string docs)
        {
            return base.Channel.DeleteReminderDocsAsync(key, owner_user, docs);
        }
        
        public System.Threading.Tasks.Task<string> SubmitInDBAsync(string key, string tblName, string[] fields)
        {
            return base.Channel.SubmitInDBAsync(key, tblName, fields);
        }
        
        public System.Threading.Tasks.Task<string> UpdateInstancesAsync(string key, string tblName, string[] srchFields, string[] updtFields)
        {
            return base.Channel.UpdateInstancesAsync(key, tblName, srchFields, updtFields);
        }
        
        public System.Threading.Tasks.Task<string> GetInstancesAsync(string key, string tblName, string[] srchFields)
        {
            return base.Channel.GetInstancesAsync(key, tblName, srchFields);
        }
        
        public System.Threading.Tasks.Task<string> GetRoleTypeAsync(string key, string tblName, string[] srchFields)
        {
            return base.Channel.GetRoleTypeAsync(key, tblName, srchFields);
        }
        
        public System.Threading.Tasks.Task<string> DeleteInstancesAsync(string key, string tblName, string[] srchFields)
        {
            return base.Channel.DeleteInstancesAsync(key, tblName, srchFields);
        }
        
        public System.Threading.Tasks.Task<int> GetTillWhenAsync(string key, int productID)
        {
            return base.Channel.GetTillWhenAsync(key, productID);
        }
        
        public System.Threading.Tasks.Task<int> SetTillWhenAsync(string key, int productID, int updateID, System.DateTime dataTill, string note, int issue, int year)
        {
            return base.Channel.SetTillWhenAsync(key, productID, updateID, dataTill, note, issue, year);
        }
        
        public System.Threading.Tasks.Task<int> ExecuteSQLBatchAsync(string key, int productID, string sqlScript)
        {
            return base.Channel.ExecuteSQLBatchAsync(key, productID, sqlScript);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CielaService.UpdateBlobFieldsResponse> CielaService.PlainServiceSoap.UpdateBlobFieldsAsync(CielaService.UpdateBlobFieldsRequest request)
        {
            return base.Channel.UpdateBlobFieldsAsync(request);
        }
        
        public System.Threading.Tasks.Task<CielaService.UpdateBlobFieldsResponse> UpdateBlobFieldsAsync(string key, int productID, string tableName, string columnNameBlob, string columnNameIDNA, byte[] buff, int idna)
        {
            CielaService.UpdateBlobFieldsRequest inValue = new CielaService.UpdateBlobFieldsRequest();
            inValue.key = key;
            inValue.productID = productID;
            inValue.tableName = tableName;
            inValue.columnNameBlob = columnNameBlob;
            inValue.columnNameIDNA = columnNameIDNA;
            inValue.buff = buff;
            inValue.idna = idna;
            return ((CielaService.PlainServiceSoap)(this)).UpdateBlobFieldsAsync(inValue);
        }
        
        public System.Threading.Tasks.Task<int> GetProductInfoAsync(string key, int productID)
        {
            return base.Channel.GetProductInfoAsync(key, productID);
        }
        
        public System.Threading.Tasks.Task<string> GetProductInfoNameAsync(string key, int productID)
        {
            return base.Channel.GetProductInfoNameAsync(key, productID);
        }
        
        public System.Threading.Tasks.Task<string> GetInstalledProductsAsync(string key)
        {
            return base.Channel.GetInstalledProductsAsync(key);
        }
        
        public System.Threading.Tasks.Task<string> GetServiceVersionAsync(string key)
        {
            return base.Channel.GetServiceVersionAsync(key);
        }
        
        public System.Threading.Tasks.Task InsertDocumentReminderAsync(string userName, CielaService.ArrayOfXElement documentsList)
        {
            return base.Channel.InsertDocumentReminderAsync(userName, documentsList);
        }
        
        public System.Threading.Tasks.Task DeleteDocumentReminderAsync(string userName, CielaService.ArrayOfXElement documentsList)
        {
            return base.Channel.DeleteDocumentReminderAsync(userName, documentsList);
        }
        
        public System.Threading.Tasks.Task DeleteOccurredEventsAsync(string userName, CielaService.ArrayOfXElement product)
        {
            return base.Channel.DeleteOccurredEventsAsync(userName, product);
        }
        
        public System.Threading.Tasks.Task CalculateReminderEventsSingleAsync(CielaService.ArrayOfXElement documentsList, CielaService.ArrayOfXElement product)
        {
            return base.Channel.CalculateReminderEventsSingleAsync(documentsList, product);
        }
        
        public System.Threading.Tasks.Task CalculateReminderEventsMultipleAsync(CielaService.ArrayOfXElement documentsList, CielaService.ArrayOfXElement product)
        {
            return base.Channel.CalculateReminderEventsMultipleAsync(documentsList, product);
        }
        
        public System.Threading.Tasks.Task DeleteHistoryAsync(string userName, CielaService.ArrayOfXElement product)
        {
            return base.Channel.DeleteHistoryAsync(userName, product);
        }
        
        public System.Threading.Tasks.Task<CielaService.ArrayOfXElement> GetLastUpdateAsync(CielaService.ArrayOfXElement product)
        {
            return base.Channel.GetLastUpdateAsync(product);
        }
        
        public System.Threading.Tasks.Task<CielaService.ArrayOfXElement> GetEventsAsync(string userName, CielaService.ArrayOfXElement product)
        {
            return base.Channel.GetEventsAsync(userName, product);
        }
        
        public System.Threading.Tasks.Task<int> GetEventsCountAsync(string userName, CielaService.ArrayOfXElement product)
        {
            return base.Channel.GetEventsCountAsync(userName, product);
        }
        
        public System.Threading.Tasks.Task<CielaService.ArrayOfXElement> GetEventsSortPageAsync(string userName, CielaService.ArrayOfXElement product, string sortField, bool isDesc, int itemsPerPage, int pageIndex)
        {
            return base.Channel.GetEventsSortPageAsync(userName, product, sortField, isDesc, itemsPerPage, pageIndex);
        }
        
        public System.Threading.Tasks.Task<CielaService.ArrayOfXElement> GetHistoryAsync(string userName, CielaService.ArrayOfXElement product)
        {
            return base.Channel.GetHistoryAsync(userName, product);
        }
        
        public System.Threading.Tasks.Task<CielaService.ArrayOfXElement> GetFollowedDocumentsAsync(string userName, CielaService.ArrayOfXElement product)
        {
            return base.Channel.GetFollowedDocumentsAsync(userName, product);
        }
        
        public System.Threading.Tasks.Task<int> GetFollowedDocumentsCountAsync(string userName, CielaService.ArrayOfXElement product)
        {
            return base.Channel.GetFollowedDocumentsCountAsync(userName, product);
        }
        
        public System.Threading.Tasks.Task<CielaService.ArrayOfXElement> GetFollowedDocumentsSortPageAsync(string userName, CielaService.ArrayOfXElement product, string sortField, bool isDesc, int itemsPerPage, int pageIndex)
        {
            return base.Channel.GetFollowedDocumentsSortPageAsync(userName, product, sortField, isDesc, itemsPerPage, pageIndex);
        }
        
        public System.Threading.Tasks.Task<bool> HasOccurredEventsAsync(string userName, CielaService.ArrayOfXElement product)
        {
            return base.Channel.HasOccurredEventsAsync(userName, product);
        }
        
        public System.Threading.Tasks.Task ProduceReminderEventsAsync(CielaService.ArrayOfXElement product)
        {
            return base.Channel.ProduceReminderEventsAsync(product);
        }
        
        public System.Threading.Tasks.Task DeleteOccurredEventsAllAsync(string userName, CielaService.ArrayOfXElement products)
        {
            return base.Channel.DeleteOccurredEventsAllAsync(userName, products);
        }
        
        public System.Threading.Tasks.Task<CielaService.ArrayOfXElement> GetEventsAllAsync(string userName, CielaService.ArrayOfXElement products)
        {
            return base.Channel.GetEventsAllAsync(userName, products);
        }
        
        public System.Threading.Tasks.Task<CielaService.ArrayOfXElement> GetHistoryAllAsync(string userName, CielaService.ArrayOfXElement products)
        {
            return base.Channel.GetHistoryAllAsync(userName, products);
        }
        
        public System.Threading.Tasks.Task<CielaService.ArrayOfXElement> GetFollowedDocumentsAllAsync(string userName, CielaService.ArrayOfXElement products)
        {
            return base.Channel.GetFollowedDocumentsAllAsync(userName, products);
        }
        
        public System.Threading.Tasks.Task<CielaService.ArrayOfXElement> GetFollowedDocumentsByPageAsync(string userName, CielaService.ArrayOfXElement products, string sortField, bool isDesc, int itemsPerPage, int pageIndex)
        {
            return base.Channel.GetFollowedDocumentsByPageAsync(userName, products, sortField, isDesc, itemsPerPage, pageIndex);
        }
        
        public System.Threading.Tasks.Task<CielaService.ArrayOfXElement> HasOccurredEventsAllAsync(string userName)
        {
            return base.Channel.HasOccurredEventsAllAsync(userName);
        }
        
        public System.Threading.Tasks.Task ProduceReminderEventsAllAsync()
        {
            return base.Channel.ProduceReminderEventsAllAsync();
        }
        
        public System.Threading.Tasks.Task<bool> HasReminderErrorAsync()
        {
            return base.Channel.HasReminderErrorAsync();
        }
        
        public System.Threading.Tasks.Task<int> SaveNoteAsync(CielaService.ArrayOfXElement newNote)
        {
            return base.Channel.SaveNoteAsync(newNote);
        }
        
        public System.Threading.Tasks.Task<CielaService.ArrayOfXElement> GetAllNotesForUserAsync(string userName)
        {
            return base.Channel.GetAllNotesForUserAsync(userName);
        }
        
        public System.Threading.Tasks.Task<CielaService.ArrayOfXElement> GetNoteAsync(int idNote, string userName)
        {
            return base.Channel.GetNoteAsync(idNote, userName);
        }
        
        public System.Threading.Tasks.Task<System.DateTime> UpdateNoteAsync(CielaService.ArrayOfXElement note)
        {
            return base.Channel.UpdateNoteAsync(note);
        }
        
        public System.Threading.Tasks.Task<CielaService.ArrayOfXElement> GetNotesForDocumentAsync(int idna, int productId, string userName)
        {
            return base.Channel.GetNotesForDocumentAsync(idna, productId, userName);
        }
        
        public System.Threading.Tasks.Task DeleteNoteAsync(CielaService.ArrayOfXElement note)
        {
            return base.Channel.DeleteNoteAsync(note);
        }
        
        public System.Threading.Tasks.Task DeleteNotesAsync(int[] notesIds)
        {
            return base.Channel.DeleteNotesAsync(notesIds);
        }
        
        public System.Threading.Tasks.Task<CielaService.ArrayOfXElement> GetNotesForDocumentItemAsync(CielaService.ArrayOfXElement item, int productId, string userName)
        {
            return base.Channel.GetNotesForDocumentItemAsync(item, productId, userName);
        }
        
        public System.Threading.Tasks.Task<CielaService.ArrayOfXElement> GetAllDocumentItemsWithNotesAsync(int idna, int productId, string userName)
        {
            return base.Channel.GetAllDocumentItemsWithNotesAsync(idna, productId, userName);
        }
        
        public System.Threading.Tasks.Task<CielaService.ArrayOfXElement> GetTimeFilteredNotesAsync(System.DateTime startDate, System.DateTime endDate, string userName)
        {
            return base.Channel.GetTimeFilteredNotesAsync(startDate, endDate, userName);
        }
        
        public System.Threading.Tasks.Task<int> GetTimeFilteredNotesCountAsync(System.DateTime startDate, System.DateTime endDate, string userName)
        {
            return base.Channel.GetTimeFilteredNotesCountAsync(startDate, endDate, userName);
        }
        
        public System.Threading.Tasks.Task<CielaService.ArrayOfXElement> GetTimeFilteredNotesByPageAsync(System.DateTime startDate, System.DateTime endDate, string userName, string sortField, bool isDesc, int itemsPerPage, int pageIndex)
        {
            return base.Channel.GetTimeFilteredNotesByPageAsync(startDate, endDate, userName, sortField, isDesc, itemsPerPage, pageIndex);
        }
        
        public System.Threading.Tasks.Task<bool> HasRemainderNotesAsync(System.DateTime startDate, System.DateTime endDate, string userName)
        {
            return base.Channel.HasRemainderNotesAsync(startDate, endDate, userName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CielaService.ExportNotesResponse> CielaService.PlainServiceSoap.ExportNotesAsync(CielaService.ExportNotesRequest request)
        {
            return base.Channel.ExportNotesAsync(request);
        }
        
        public System.Threading.Tasks.Task<CielaService.ExportNotesResponse> ExportNotesAsync(string userName)
        {
            CielaService.ExportNotesRequest inValue = new CielaService.ExportNotesRequest();
            inValue.userName = userName;
            return ((CielaService.PlainServiceSoap)(this)).ExportNotesAsync(inValue);
        }
        
        public System.Threading.Tasks.Task<int> ImportNotesAsync(string userName, CielaService.ArrayOfXElement notes)
        {
            return base.Channel.ImportNotesAsync(userName, notes);
        }
        
        public System.Threading.Tasks.Task<CielaService.ArrayOfXElement> GetAllNotesWithTermsAsync(string userName)
        {
            return base.Channel.GetAllNotesWithTermsAsync(userName);
        }
        
        public System.Threading.Tasks.Task<int> GetNotesWithTermsCountAsync(string userName)
        {
            return base.Channel.GetNotesWithTermsCountAsync(userName);
        }
        
        public System.Threading.Tasks.Task<CielaService.ArrayOfXElement> GetNotesWithTermsByPageAsync(string userName, string sortField, bool isDesc, int itemsPerPage, int pageIndex)
        {
            return base.Channel.GetNotesWithTermsByPageAsync(userName, sortField, isDesc, itemsPerPage, pageIndex);
        }
        
        public System.Threading.Tasks.Task<CielaService.RegisterProductResult> RegisterProductAsync(string strCode, bool StoreLicenseFile, string key)
        {
            return base.Channel.RegisterProductAsync(strCode, StoreLicenseFile, key);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CielaService.XSLTInsertResponse> CielaService.PlainServiceSoap.XSLTInsertAsync(CielaService.XSLTInsertRequest request)
        {
            return base.Channel.XSLTInsertAsync(request);
        }
        
        public System.Threading.Tasks.Task<CielaService.XSLTInsertResponse> XSLTInsertAsync(string key, string xsltText)
        {
            CielaService.XSLTInsertRequest inValue = new CielaService.XSLTInsertRequest();
            inValue.key = key;
            inValue.xsltText = xsltText;
            return ((CielaService.PlainServiceSoap)(this)).XSLTInsertAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CielaService.XSLTSelectResponse> CielaService.PlainServiceSoap.XSLTSelectAsync(CielaService.XSLTSelectRequest request)
        {
            return base.Channel.XSLTSelectAsync(request);
        }
        
        public System.Threading.Tasks.Task<CielaService.XSLTSelectResponse> XSLTSelectAsync(string key, int xsltID)
        {
            CielaService.XSLTSelectRequest inValue = new CielaService.XSLTSelectRequest();
            inValue.key = key;
            inValue.xsltID = xsltID;
            return ((CielaService.PlainServiceSoap)(this)).XSLTSelectAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CielaService.XSLTUpdateResponse> CielaService.PlainServiceSoap.XSLTUpdateAsync(CielaService.XSLTUpdateRequest request)
        {
            return base.Channel.XSLTUpdateAsync(request);
        }
        
        public System.Threading.Tasks.Task<CielaService.XSLTUpdateResponse> XSLTUpdateAsync(string key, int xsltID, string xsltText)
        {
            CielaService.XSLTUpdateRequest inValue = new CielaService.XSLTUpdateRequest();
            inValue.key = key;
            inValue.xsltID = xsltID;
            inValue.xsltText = xsltText;
            return ((CielaService.PlainServiceSoap)(this)).XSLTUpdateAsync(inValue);
        }
        
        public System.Threading.Tasks.Task<string> DocumentsWithTypeGetAsync(string key, int[] docTypes, int[] docList)
        {
            return base.Channel.DocumentsWithTypeGetAsync(key, docTypes, docList);
        }
        
        public System.Threading.Tasks.Task<CielaService.TempDocumentInfoGetResponse> TempDocumentInfoGetAsync(CielaService.TempDocumentInfoGetRequest request)
        {
            return base.Channel.TempDocumentInfoGetAsync(request);
        }
        
        public System.Threading.Tasks.Task<string> DocumentLegalDefDeleteAsync(string key, int idRef)
        {
            return base.Channel.DocumentLegalDefDeleteAsync(key, idRef);
        }
        
        public System.Threading.Tasks.Task<CielaService.DocumentLegalDefCreateResponse> DocumentLegalDefCreateAsync(CielaService.DocumentLegalDefCreateRequest request)
        {
            return base.Channel.DocumentLegalDefCreateAsync(request);
        }
        
        public System.Threading.Tasks.Task<string> DocumentReferencesDeleteAsync(string key, int idRef)
        {
            return base.Channel.DocumentReferencesDeleteAsync(key, idRef);
        }
        
        public System.Threading.Tasks.Task<string> DocumentEditionUpdateTranslationAsync(string key, int idna, int idstr, int transIdna, int transIdstr, string idUser)
        {
            return base.Channel.DocumentEditionUpdateTranslationAsync(key, idna, idstr, transIdna, transIdstr, idUser);
        }
        
        public System.Threading.Tasks.Task<CielaService.DocumentReferencesCreateResponse> DocumentReferencesCreateAsync(CielaService.DocumentReferencesCreateRequest request)
        {
            return base.Channel.DocumentReferencesCreateAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CielaService.DocumentEditionCreateResponse> CielaService.PlainServiceSoap.DocumentEditionCreateAsync(CielaService.DocumentEditionCreateRequest request)
        {
            return base.Channel.DocumentEditionCreateAsync(request);
        }
        
        public System.Threading.Tasks.Task<CielaService.DocumentEditionCreateResponse> DocumentEditionCreateAsync(string key, int idna, int idstr, object editionDate, int editionIssue, int editionType, int typeOfChange, int transIdna, int transIdstr, byte[] docText, string idUser)
        {
            CielaService.DocumentEditionCreateRequest inValue = new CielaService.DocumentEditionCreateRequest();
            inValue.key = key;
            inValue.idna = idna;
            inValue.idstr = idstr;
            inValue.editionDate = editionDate;
            inValue.editionIssue = editionIssue;
            inValue.editionType = editionType;
            inValue.typeOfChange = typeOfChange;
            inValue.transIdna = transIdna;
            inValue.transIdstr = transIdstr;
            inValue.docText = docText;
            inValue.idUser = idUser;
            return ((CielaService.PlainServiceSoap)(this)).DocumentEditionCreateAsync(inValue);
        }
        
        public System.Threading.Tasks.Task<string> InitInstanceAsync(string key)
        {
            return base.Channel.InitInstanceAsync(key);
        }
        
        public System.Threading.Tasks.Task<int> ResetAsync(string key)
        {
            return base.Channel.ResetAsync(key);
        }
        
        public System.Threading.Tasks.Task<string> DocumentTermsGetAsync(string key, int IDNA, object[] terms)
        {
            return base.Channel.DocumentTermsGetAsync(key, IDNA, terms);
        }
        
        public System.Threading.Tasks.Task<string> DocumentEditionUpdateAttributesAsync(string key, int idna, int idstr, object editionDate, int editionIssue, int editionType, int typeOfChange, int transIdna, int transIdstr, string idUser)
        {
            return base.Channel.DocumentEditionUpdateAttributesAsync(key, idna, idstr, editionDate, editionIssue, editionType, typeOfChange, transIdna, transIdstr, idUser);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CielaService.DocumentEditionUpdateDocTextResponse> CielaService.PlainServiceSoap.DocumentEditionUpdateDocTextAsync(CielaService.DocumentEditionUpdateDocTextRequest request)
        {
            return base.Channel.DocumentEditionUpdateDocTextAsync(request);
        }
        
        public System.Threading.Tasks.Task<CielaService.DocumentEditionUpdateDocTextResponse> DocumentEditionUpdateDocTextAsync(string key, int idna, byte[] docText, string idUser)
        {
            CielaService.DocumentEditionUpdateDocTextRequest inValue = new CielaService.DocumentEditionUpdateDocTextRequest();
            inValue.key = key;
            inValue.idna = idna;
            inValue.docText = docText;
            inValue.idUser = idUser;
            return ((CielaService.PlainServiceSoap)(this)).DocumentEditionUpdateDocTextAsync(inValue);
        }
        
        public System.Threading.Tasks.Task<string> ExecuteSQLScriptAsync(string key, string query)
        {
            return base.Channel.ExecuteSQLScriptAsync(key, query);
        }
        
        public System.Threading.Tasks.Task<string> StructureCreateAsync(string key, CielaService.DatabasesEditableEnum dbId, int idPrevStructure, int idParStructure, string title, int idLang, int idIcon, string condition, bool groupByYear, bool usePublishDate, bool onlyInForce, bool onlyRepealed, bool isClientVisible, bool behind, CielaService.ArrayOfXElement connectedStructure)
        {
            return base.Channel.StructureCreateAsync(key, dbId, idPrevStructure, idParStructure, title, idLang, idIcon, condition, groupByYear, usePublishDate, onlyInForce, onlyRepealed, isClientVisible, behind, connectedStructure);
        }
        
        public System.Threading.Tasks.Task<string> StructureUpdateAsync(string key, int idStructure, CielaService.DatabasesEditableEnum dbId, string title, int idLang, int idIcon, string condition, bool groupByYear, bool usePublishDate, bool onlyInForce, bool onlyRepealed, bool isClientVisible, CielaService.ArrayOfXElement connectedStructure, string idUser)
        {
            return base.Channel.StructureUpdateAsync(key, idStructure, dbId, title, idLang, idIcon, condition, groupByYear, usePublishDate, onlyInForce, onlyRepealed, isClientVisible, connectedStructure, idUser);
        }
        
        public System.Threading.Tasks.Task<string> StructureCopyAsync(string key, int idPrevStructure, int idParStructure, int idStructure, CielaService.DatabasesEditableEnum dbId, bool behind)
        {
            return base.Channel.StructureCopyAsync(key, idPrevStructure, idParStructure, idStructure, dbId, behind);
        }
        
        public System.Threading.Tasks.Task<string> StructurePropertiesSelectAsync(string key, int structID, CielaService.DatabasesEditableEnum dbId)
        {
            return base.Channel.StructurePropertiesSelectAsync(key, structID, dbId);
        }
        
        public System.Threading.Tasks.Task<string> StructureMoveAsync(string key, int idPrevStructure, int idParStructure, int idStructure, CielaService.DatabasesEditableEnum dbId, bool behind, string idUser)
        {
            return base.Channel.StructureMoveAsync(key, idPrevStructure, idParStructure, idStructure, dbId, behind, idUser);
        }
        
        public System.Threading.Tasks.Task<string> StructureDeleteAsync(string key, int structID, CielaService.DatabasesEditableEnum dbId, string idUser)
        {
            return base.Channel.StructureDeleteAsync(key, structID, dbId, idUser);
        }
        
        public System.Threading.Tasks.Task<string> StructureManualInsertDocAsync(string key, int idStructure, int idPrevIdna, int idParIdna, int idna, CielaService.DatabasesEditableEnum dbId, int idstr, bool behind, string idUser)
        {
            return base.Channel.StructureManualInsertDocAsync(key, idStructure, idPrevIdna, idParIdna, idna, dbId, idstr, behind, idUser);
        }
        
        public System.Threading.Tasks.Task<string> StructureManualDeleteDocAsync(string key, int idStructure, int idParIdna, int idna, CielaService.DatabasesEditableEnum dbId, string idUser)
        {
            return base.Channel.StructureManualDeleteDocAsync(key, idStructure, idParIdna, idna, dbId, idUser);
        }
        
        public System.Threading.Tasks.Task<string> TreeStructureCreateAsync(string key, int structItemID, int parItemID, string treeItemTitle, int childLevel, int sortNo, int IDNA, int IDSTR, int openIDStruct)
        {
            return base.Channel.TreeStructureCreateAsync(key, structItemID, parItemID, treeItemTitle, childLevel, sortNo, IDNA, IDSTR, openIDStruct);
        }
        
        public System.Threading.Tasks.Task<string> TreeStructureUpdateAsync(string key, int structItemID, int parItemID, string treeItemTitle, int childLevel, int sortNo, int IDNA, int IDSTR, int openIDStruct)
        {
            return base.Channel.TreeStructureUpdateAsync(key, structItemID, parItemID, treeItemTitle, childLevel, sortNo, IDNA, IDSTR, openIDStruct);
        }
        
        public System.Threading.Tasks.Task<string> TreeStructureDeleteAsync(string key, int structID, string condition)
        {
            return base.Channel.TreeStructureDeleteAsync(key, structID, condition);
        }
        
        public System.Threading.Tasks.Task<string> TreeStructureSubTreeMoveAsync(string key, int structID, int oldParentID, int newParentID)
        {
            return base.Channel.TreeStructureSubTreeMoveAsync(key, structID, oldParentID, newParentID);
        }
        
        public System.Threading.Tasks.Task<string> TreeStructureSubTreeCopyAsync(string key, int structID, int oldParentID, int newParentID)
        {
            return base.Channel.TreeStructureSubTreeCopyAsync(key, structID, oldParentID, newParentID);
        }
        
        public System.Threading.Tasks.Task<string> TreeStructureSelectAsync(string key, int structItemID, string sortOrder, string condition, bool isClientRegime)
        {
            return base.Channel.TreeStructureSelectAsync(key, structItemID, sortOrder, condition, isClientRegime);
        }
        
        public System.Threading.Tasks.Task<string> TreeStructureSelectAllAsync(string key, bool isClientRegime)
        {
            return base.Channel.TreeStructureSelectAllAsync(key, isClientRegime);
        }
        
        public System.Threading.Tasks.Task<string> TreeStructureContentSelectWithoutDateAsync(string key, int structItemID)
        {
            return base.Channel.TreeStructureContentSelectWithoutDateAsync(key, structItemID);
        }
        
        public System.Threading.Tasks.Task<string> TreeStructureContentSelectCurrentDateAsync(string key, int structItemID, System.DateTime currentDate)
        {
            return base.Channel.TreeStructureContentSelectCurrentDateAsync(key, structItemID, currentDate);
        }
        
        public System.Threading.Tasks.Task<string> TreeStructureContentSelectAsync(string key, int structItemID, System.DateTime currentDate, System.DateTime offsetDate)
        {
            return base.Channel.TreeStructureContentSelectAsync(key, structItemID, currentDate, offsetDate);
        }
        
        public System.Threading.Tasks.Task<string> TreeStructureDocumentInsertAsync(string key, int parentID, int documentID, int IDNA, string documentText)
        {
            return base.Channel.TreeStructureDocumentInsertAsync(key, parentID, documentID, IDNA, documentText);
        }
        
        public System.Threading.Tasks.Task<string> TreeStructureDocumentsInsertAsync(string key, int parentID, object[] documents)
        {
            return base.Channel.TreeStructureDocumentsInsertAsync(key, parentID, documents);
        }
        
        public System.Threading.Tasks.Task<string> TreeStructureDocumentDeleteAsync(string key, int docID)
        {
            return base.Channel.TreeStructureDocumentDeleteAsync(key, docID);
        }
        
        public System.Threading.Tasks.Task<string> TreeStructureDocumentsDeleteAsync(string key, object[] documents, string condition)
        {
            return base.Channel.TreeStructureDocumentsDeleteAsync(key, documents, condition);
        }
        
        public System.Threading.Tasks.Task<string> TreeStructureGroupByYearsAsync(string key, int stuctureID)
        {
            return base.Channel.TreeStructureGroupByYearsAsync(key, stuctureID);
        }
        
        public System.Threading.Tasks.Task<string> TreeStructureJuridicalGetAsync(string key, int juridicalStructureID)
        {
            return base.Channel.TreeStructureJuridicalGetAsync(key, juridicalStructureID);
        }
        
        public System.Threading.Tasks.Task<string> StateGazetteAllEditionsGetAsync(string key, System.DateTime date)
        {
            return base.Channel.StateGazetteAllEditionsGetAsync(key, date);
        }
        
        public System.Threading.Tasks.Task<string> StateGazetteContentGetAsync(string key, int idEdition)
        {
            return base.Channel.StateGazetteContentGetAsync(key, idEdition);
        }
        
        public System.Threading.Tasks.Task<string> OfficialJournalAllEditionsGetAsync(string key, System.DateTime date)
        {
            return base.Channel.OfficialJournalAllEditionsGetAsync(key, date);
        }
        
        public System.Threading.Tasks.Task<string> OfficialJournalContentGetAsync(string key, int idEdition)
        {
            return base.Channel.OfficialJournalContentGetAsync(key, idEdition);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CielaService.DocumentDisplayResponse> CielaService.PlainServiceSoap.DocumentDisplayAsync(CielaService.DocumentDisplayRequest request)
        {
            return base.Channel.DocumentDisplayAsync(request);
        }
        
        public System.Threading.Tasks.Task<CielaService.DocumentDisplayResponse> DocumentDisplayAsync(string key, int documentID)
        {
            CielaService.DocumentDisplayRequest inValue = new CielaService.DocumentDisplayRequest();
            inValue.key = key;
            inValue.documentID = documentID;
            return ((CielaService.PlainServiceSoap)(this)).DocumentDisplayAsync(inValue);
        }
        
        public System.Threading.Tasks.Task<string> ItemRefsFromGetAsync(string key, int toIdna, CielaService.ProductsDbNameEnum toDbId, int toType, int toNo, int toSubno, int toIditem, CielaService.ReferenceFromButtonsEnum buttonType)
        {
            return base.Channel.ItemRefsFromGetAsync(key, toIdna, toDbId, toType, toNo, toSubno, toIditem, buttonType);
        }
        
        public System.Threading.Tasks.Task<string> ItemRefsFromGetByPageAsync(string key, int toIdna, CielaService.ProductsDbNameEnum toDbId, int toType, int toNo, int toSubno, int toIditem, CielaService.ReferenceFromButtonsEnum buttonType, int itemsPerPage, int pageIndex, string idIcons, string sortField, bool isDesc)
        {
            return base.Channel.ItemRefsFromGetByPageAsync(key, toIdna, toDbId, toType, toNo, toSubno, toIditem, buttonType, itemsPerPage, pageIndex, idIcons, sortField, isDesc);
        }
        
        public System.Threading.Tasks.Task<string> ItemRefsFromGetCountAsync(string key, int toIdna, CielaService.ProductsDbNameEnum toDbId, int toType, int toNo, int toSubno, int toIditem, CielaService.ReferenceFromButtonsEnum buttonType)
        {
            return base.Channel.ItemRefsFromGetCountAsync(key, toIdna, toDbId, toType, toNo, toSubno, toIditem, buttonType);
        }
        
        public System.Threading.Tasks.Task<string> ItemRefsFromGetGroupsAsync(string key, int toIdna, CielaService.ProductsDbNameEnum toDbId, int toType, int toNo, int toSubno, int toIditem, CielaService.ReferenceFromButtonsEnum buttonType, int itemsPerPage, string idIcons)
        {
            return base.Channel.ItemRefsFromGetGroupsAsync(key, toIdna, toDbId, toType, toNo, toSubno, toIditem, buttonType, itemsPerPage, idIcons);
        }
        
        public System.Threading.Tasks.Task<string> ItemRefsFromGetByYearAsync(string key, int toIdna, CielaService.ProductsDbNameEnum toDbId, int toType, int toNo, int toSubno, int toIditem, CielaService.ReferenceFromButtonsEnum buttonType, int itemsPerPage, int pageIndex, int year, string sortField, bool isDesc)
        {
            return base.Channel.ItemRefsFromGetByYearAsync(key, toIdna, toDbId, toType, toNo, toSubno, toIditem, buttonType, itemsPerPage, pageIndex, year, sortField, isDesc);
        }
        
        public System.Threading.Tasks.Task<string> ItemRefsFromGetItemsAsync(string key, int toIdna, CielaService.ProductsDbNameEnum toDbId, int fromIdna, int toType, int toNo, int toSubno, int toIditem, CielaService.ReferenceFromButtonsEnum buttonType)
        {
            return base.Channel.ItemRefsFromGetItemsAsync(key, toIdna, toDbId, fromIdna, toType, toNo, toSubno, toIditem, buttonType);
        }
        
        public System.Threading.Tasks.Task<string> GetReferenceCountToDocumentAsync(string key, int toIdna, int[] buttonType, int[] idIcon)
        {
            return base.Channel.GetReferenceCountToDocumentAsync(key, toIdna, buttonType, idIcon);
        }
        
        public System.Threading.Tasks.Task<string> DocumentRefsFromGetAsync(string key, int toIdna, CielaService.ProductsDbNameEnum toDbId, CielaService.ReferenceFromButtonsEnum buttonType)
        {
            return base.Channel.DocumentRefsFromGetAsync(key, toIdna, toDbId, buttonType);
        }
        
        public System.Threading.Tasks.Task<string> DocumentRefsFromGetByPageAsync(string key, int toIdna, CielaService.ProductsDbNameEnum toDbId, CielaService.ReferenceFromButtonsEnum buttonType, int itemsPerPage, int pageIndex, string idIcons)
        {
            return base.Channel.DocumentRefsFromGetByPageAsync(key, toIdna, toDbId, buttonType, itemsPerPage, pageIndex, idIcons);
        }
        
        public System.Threading.Tasks.Task<string> DocumentSortedRefsFromGetByPageAsync(string key, int toIdna, CielaService.ProductsDbNameEnum toDbId, CielaService.ReferenceFromButtonsEnum buttonType, int itemsPerPage, int pageIndex, string idIcons, string sortField, bool isDesc)
        {
            return base.Channel.DocumentSortedRefsFromGetByPageAsync(key, toIdna, toDbId, buttonType, itemsPerPage, pageIndex, idIcons, sortField, isDesc);
        }
        
        public System.Threading.Tasks.Task<string> DocumentRefsFromGetCountAsync(string key, int toIdna, CielaService.ProductsDbNameEnum toDbId, CielaService.ReferenceFromButtonsEnum buttonType)
        {
            return base.Channel.DocumentRefsFromGetCountAsync(key, toIdna, toDbId, buttonType);
        }
        
        public System.Threading.Tasks.Task<string> DocumentRefsFromGetGroupsAsync(string key, int toIdna, CielaService.ProductsDbNameEnum toDbId, CielaService.ReferenceFromButtonsEnum buttonType)
        {
            return base.Channel.DocumentRefsFromGetGroupsAsync(key, toIdna, toDbId, buttonType);
        }
        
        public System.Threading.Tasks.Task<string> DocumentRefsFromGetByYearAsync(string key, int toIdna, CielaService.ProductsDbNameEnum toDbId, CielaService.ReferenceFromButtonsEnum buttonType, int itemsPerPage, int pageIndex, int year)
        {
            return base.Channel.DocumentRefsFromGetByYearAsync(key, toIdna, toDbId, buttonType, itemsPerPage, pageIndex, year);
        }
        
        public System.Threading.Tasks.Task<string> DocumentSortedRefsFromGetByYearAsync(string key, int toIdna, CielaService.ProductsDbNameEnum toDbId, CielaService.ReferenceFromButtonsEnum buttonType, int itemsPerPage, int pageIndex, int year, string sortField, bool isDesc)
        {
            return base.Channel.DocumentSortedRefsFromGetByYearAsync(key, toIdna, toDbId, buttonType, itemsPerPage, pageIndex, year, sortField, isDesc);
        }
        
        public System.Threading.Tasks.Task<string> DocumentRefsFromGetItemsAsync(string key, int toIdna, CielaService.ProductsDbNameEnum toDbId, CielaService.ReferenceFromButtonsEnum buttonType, int fromIdna)
        {
            return base.Channel.DocumentRefsFromGetItemsAsync(key, toIdna, toDbId, buttonType, fromIdna);
        }
        
        public System.Threading.Tasks.Task<string> DocumentRefsToGetAsync(string key, int idna)
        {
            return base.Channel.DocumentRefsToGetAsync(key, idna);
        }
        
        public System.Threading.Tasks.Task<string> DocumentRefsToGetByPageAsync(string key, int idna, CielaService.ProductsDbNameEnum dbId, int itemsPerPage, int pageIndex, string idIcons)
        {
            return base.Channel.DocumentRefsToGetByPageAsync(key, idna, dbId, itemsPerPage, pageIndex, idIcons);
        }
        
        public System.Threading.Tasks.Task<string> DocumentSortedRefsToGetByPageAsync(string key, int idna, CielaService.ProductsDbNameEnum dbId, int itemsPerPage, int pageIndex, string idIcons, string sortField, bool isDesc)
        {
            return base.Channel.DocumentSortedRefsToGetByPageAsync(key, idna, dbId, itemsPerPage, pageIndex, idIcons, sortField, isDesc);
        }
        
        public System.Threading.Tasks.Task<string> DocumentRefsToGetCountAsync(string key, int idna, CielaService.ProductsDbNameEnum dbId)
        {
            return base.Channel.DocumentRefsToGetCountAsync(key, idna, dbId);
        }
        
        public System.Threading.Tasks.Task<string> DocumentRefsToGetGroupsAsync(string key, int idna, CielaService.ProductsDbNameEnum dbId)
        {
            return base.Channel.DocumentRefsToGetGroupsAsync(key, idna, dbId);
        }
        
        public System.Threading.Tasks.Task<string> DocumentRefsToGetItemsAsync(string key, int idna, int toIdna)
        {
            return base.Channel.DocumentRefsToGetItemsAsync(key, idna, toIdna);
        }
        
        public System.Threading.Tasks.Task<string> DocumentInfoGetAsync(string key, int IDNA)
        {
            return base.Channel.DocumentInfoGetAsync(key, IDNA);
        }
        
        public System.Threading.Tasks.Task<string> DocumentAuthorsGetAsync(string key)
        {
            return base.Channel.DocumentAuthorsGetAsync(key);
        }
        
        public System.Threading.Tasks.Task<string> RefInfoGetAsync(string key, int IDREF)
        {
            return base.Channel.RefInfoGetAsync(key, IDREF);
        }
        
        public System.Threading.Tasks.Task<string> DbActualityInfoGetAsync(string key)
        {
            return base.Channel.DbActualityInfoGetAsync(key);
        }
        
        public System.Threading.Tasks.Task<string> DocumentIdnasGetAsync(string key)
        {
            return base.Channel.DocumentIdnasGetAsync(key);
        }
        
        public System.Threading.Tasks.Task<string> DocumentHistoryGetAsync(string key, int IDNA)
        {
            return base.Channel.DocumentHistoryGetAsync(key, IDNA);
        }
        
        public System.Threading.Tasks.Task<string> DocumentDatesGetAsync(string key, int IDNA)
        {
            return base.Channel.DocumentDatesGetAsync(key, IDNA);
        }
        
        public System.Threading.Tasks.Task<CielaService.ArrayOfXElement> DocumentTypesGetAsync(int[] idnaList, bool useTempTable)
        {
            return base.Channel.DocumentTypesGetAsync(idnaList, useTempTable);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CielaService.DocumentCreateResponse> CielaService.PlainServiceSoap.DocumentCreateAsync(CielaService.DocumentCreateRequest request)
        {
            return base.Channel.DocumentCreateAsync(request);
        }
        
        public System.Threading.Tasks.Task<CielaService.DocumentCreateResponse> DocumentCreateAsync(
                    string key, 
                    CielaService.DatabasesEditableEnum dbId, 
                    string title, 
                    int idLang, 
                    int idIcon, 
                    object publishDate, 
                    object inforceDate, 
                    object repealDate, 
                    object outforceDate, 
                    string abriv, 
                    byte[] docText, 
                    object editionDate, 
                    int editionIssue, 
                    int editionType, 
                    int typeOfChange, 
                    int[] docTypes, 
                    int transIdna, 
                    int transIdstr, 
                    string idUser)
        {
            CielaService.DocumentCreateRequest inValue = new CielaService.DocumentCreateRequest();
            inValue.key = key;
            inValue.dbId = dbId;
            inValue.title = title;
            inValue.idLang = idLang;
            inValue.idIcon = idIcon;
            inValue.publishDate = publishDate;
            inValue.inforceDate = inforceDate;
            inValue.repealDate = repealDate;
            inValue.outforceDate = outforceDate;
            inValue.abriv = abriv;
            inValue.docText = docText;
            inValue.editionDate = editionDate;
            inValue.editionIssue = editionIssue;
            inValue.editionType = editionType;
            inValue.typeOfChange = typeOfChange;
            inValue.docTypes = docTypes;
            inValue.transIdna = transIdna;
            inValue.transIdstr = transIdstr;
            inValue.idUser = idUser;
            return ((CielaService.PlainServiceSoap)(this)).DocumentCreateAsync(inValue);
        }
        
        public System.Threading.Tasks.Task<string> UpdateTypesAndIconOfDocumentAsync(string key, int idna, CielaService.DatabasesEditableEnum dbId, int idIcon, int[] docTypesAdd, int[] docTypesRemove, string idUser)
        {
            return base.Channel.UpdateTypesAndIconOfDocumentAsync(key, idna, dbId, idIcon, docTypesAdd, docTypesRemove, idUser);
        }
        
        public System.Threading.Tasks.Task<string> UpdateTypesOfDocumentAsync(string key, int idna, CielaService.DatabasesEditableEnum dbId, int[] docTypesAdd, int[] docTypesRemove, string idUser)
        {
            return base.Channel.UpdateTypesOfDocumentAsync(key, idna, dbId, docTypesAdd, docTypesRemove, idUser);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CielaService.DocumentUpdateResponse> CielaService.PlainServiceSoap.DocumentUpdateAsync(CielaService.DocumentUpdateRequest request)
        {
            return base.Channel.DocumentUpdateAsync(request);
        }
        
        public System.Threading.Tasks.Task<CielaService.DocumentUpdateResponse> DocumentUpdateAsync(string key, int idna, CielaService.DatabasesEditableEnum dbId, string title, int idLang, int idIcon, object publishDate, object inforceDate, object repealDate, object outforceDate, string abriv, string celex, byte[] docText, int[] docTypes, string idUser)
        {
            CielaService.DocumentUpdateRequest inValue = new CielaService.DocumentUpdateRequest();
            inValue.key = key;
            inValue.idna = idna;
            inValue.dbId = dbId;
            inValue.title = title;
            inValue.idLang = idLang;
            inValue.idIcon = idIcon;
            inValue.publishDate = publishDate;
            inValue.inforceDate = inforceDate;
            inValue.repealDate = repealDate;
            inValue.outforceDate = outforceDate;
            inValue.abriv = abriv;
            inValue.celex = celex;
            inValue.docText = docText;
            inValue.docTypes = docTypes;
            inValue.idUser = idUser;
            return ((CielaService.PlainServiceSoap)(this)).DocumentUpdateAsync(inValue);
        }
        
        public System.Threading.Tasks.Task<string> DocumentDeleteAsync(string key, int idna, CielaService.DatabasesEditableEnum dbId, string idUser)
        {
            return base.Channel.DocumentDeleteAsync(key, idna, dbId, idUser);
        }
        
        public System.Threading.Tasks.Task<string> DocumentUserNotesGetAsync(string key, int IDNA)
        {
            return base.Channel.DocumentUserNotesGetAsync(key, IDNA);
        }
        
        public System.Threading.Tasks.Task<string> DocumentNearActsGetAsync(string key, int IDNA)
        {
            return base.Channel.DocumentNearActsGetAsync(key, IDNA);
        }
        
        public System.Threading.Tasks.Task<string> DocumentEditionUserNotesGetAsync(string key, int IDNA, int IDSTR, int IDITEM)
        {
            return base.Channel.DocumentEditionUserNotesGetAsync(key, IDNA, IDSTR, IDITEM);
        }
        
        public System.Threading.Tasks.Task<string> GetCurrentUpdateItemRefsFromButtonsAsync(CielaService.DatabasesEditableEnum dbId)
        {
            return base.Channel.GetCurrentUpdateItemRefsFromButtonsAsync(dbId);
        }
        
        public System.Threading.Tasks.Task UpdateItemRefsFromButtonsAsync(CielaService.DatabasesEditableEnum dbId, string idUser)
        {
            return base.Channel.UpdateItemRefsFromButtonsAsync(dbId, idUser);
        }
        
        public System.Threading.Tasks.Task<CielaService.DocumentDisplayEditResponse> DocumentDisplayEditAsync(CielaService.DocumentDisplayEditRequest request)
        {
            return base.Channel.DocumentDisplayEditAsync(request);
        }
        
        public System.Threading.Tasks.Task<CielaService.DocumentCreateEditResponse> DocumentCreateEditAsync(CielaService.DocumentCreateEditRequest request)
        {
            return base.Channel.DocumentCreateEditAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CielaService.DocumentUpdateEditResponse> CielaService.PlainServiceSoap.DocumentUpdateEditAsync(CielaService.DocumentUpdateEditRequest request)
        {
            return base.Channel.DocumentUpdateEditAsync(request);
        }
        
        public System.Threading.Tasks.Task<CielaService.DocumentUpdateEditResponse> DocumentUpdateEditAsync(string key, int idna, CielaService.DatabasesEditableEnum dbId, string idUser, byte[] docData, byte[] docInfo, CielaService.ArrayOfXElement docImages)
        {
            CielaService.DocumentUpdateEditRequest inValue = new CielaService.DocumentUpdateEditRequest();
            inValue.key = key;
            inValue.idna = idna;
            inValue.dbId = dbId;
            inValue.idUser = idUser;
            inValue.docData = docData;
            inValue.docInfo = docInfo;
            inValue.docImages = docImages;
            return ((CielaService.PlainServiceSoap)(this)).DocumentUpdateEditAsync(inValue);
        }
        
        public System.Threading.Tasks.Task<string> DocumentDeleteEditAsync(string key, int idna, CielaService.DatabasesEditableEnum dbId, string idUser)
        {
            return base.Channel.DocumentDeleteEditAsync(key, idna, dbId, idUser);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CielaService.DocumentUnlockEditResponse> CielaService.PlainServiceSoap.DocumentUnlockEditAsync(CielaService.DocumentUnlockEditRequest request)
        {
            return base.Channel.DocumentUnlockEditAsync(request);
        }
        
        public System.Threading.Tasks.Task<CielaService.DocumentUnlockEditResponse> DocumentUnlockEditAsync(string key, int[][] docIdDbIdPairs, string idUser)
        {
            CielaService.DocumentUnlockEditRequest inValue = new CielaService.DocumentUnlockEditRequest();
            inValue.key = key;
            inValue.docIdDbIdPairs = docIdDbIdPairs;
            inValue.idUser = idUser;
            return ((CielaService.PlainServiceSoap)(this)).DocumentUnlockEditAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CielaService.DocumentInfoGetEditResponse> CielaService.PlainServiceSoap.DocumentInfoGetEditAsync(CielaService.DocumentInfoGetEditRequest request)
        {
            return base.Channel.DocumentInfoGetEditAsync(request);
        }
        
        public System.Threading.Tasks.Task<CielaService.DocumentInfoGetEditResponse> DocumentInfoGetEditAsync(string key, int idna, CielaService.DatabasesEditableEnum dbId)
        {
            CielaService.DocumentInfoGetEditRequest inValue = new CielaService.DocumentInfoGetEditRequest();
            inValue.key = key;
            inValue.idna = idna;
            inValue.dbId = dbId;
            return ((CielaService.PlainServiceSoap)(this)).DocumentInfoGetEditAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CielaService.TempDocumentsListGetResponse> CielaService.PlainServiceSoap.TempDocumentsListGetAsync(CielaService.TempDocumentsListGetRequest request)
        {
            return base.Channel.TempDocumentsListGetAsync(request);
        }
        
        public System.Threading.Tasks.Task<CielaService.TempDocumentsListGetResponse> TempDocumentsListGetAsync(string key, int[][] docIdDbIdPairs)
        {
            CielaService.TempDocumentsListGetRequest inValue = new CielaService.TempDocumentsListGetRequest();
            inValue.key = key;
            inValue.docIdDbIdPairs = docIdDbIdPairs;
            return ((CielaService.PlainServiceSoap)(this)).TempDocumentsListGetAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CielaService.TempDocumentCommitResponse> CielaService.PlainServiceSoap.TempDocumentCommitAsync(CielaService.TempDocumentCommitRequest request)
        {
            return base.Channel.TempDocumentCommitAsync(request);
        }
        
        public System.Threading.Tasks.Task<CielaService.TempDocumentCommitResponse> TempDocumentCommitAsync(string key, int[][] docIdDbIdPairs, string idUser)
        {
            CielaService.TempDocumentCommitRequest inValue = new CielaService.TempDocumentCommitRequest();
            inValue.key = key;
            inValue.docIdDbIdPairs = docIdDbIdPairs;
            inValue.idUser = idUser;
            return ((CielaService.PlainServiceSoap)(this)).TempDocumentCommitAsync(inValue);
        }
        
        public System.Threading.Tasks.Task<string> DocumentTypesListGetAsync(string key, CielaService.DatabasesEditableEnum dbId)
        {
            return base.Channel.DocumentTypesListGetAsync(key, dbId);
        }
        
        public System.Threading.Tasks.Task<CielaService.DocumentTypeCreateResponse> DocumentTypeCreateAsync(CielaService.DocumentTypeCreateRequest request)
        {
            return base.Channel.DocumentTypeCreateAsync(request);
        }
        
        public System.Threading.Tasks.Task<string> DocumentTypeUpdateAsync(string key, int doctype, int idTypeInfo, int sortno, string name, int weight, string idUser, CielaService.DatabasesEditableEnum dbId)
        {
            return base.Channel.DocumentTypeUpdateAsync(key, doctype, idTypeInfo, sortno, name, weight, idUser, dbId);
        }
        
        public System.Threading.Tasks.Task<string> DocumentTypeDeleteAsync(string key, int doctype, string idUser, CielaService.DatabasesEditableEnum dbId)
        {
            return base.Channel.DocumentTypeDeleteAsync(key, doctype, idUser, dbId);
        }
        
        public System.Threading.Tasks.Task<string> DocTypesIconListGetAsync(string key, CielaService.DatabasesEditableEnum dbId)
        {
            return base.Channel.DocTypesIconListGetAsync(key, dbId);
        }
        
        public System.Threading.Tasks.Task<CielaService.DocTypeIconCreateResponse> DocTypeIconCreateAsync(CielaService.DocTypeIconCreateRequest request)
        {
            return base.Channel.DocTypeIconCreateAsync(request);
        }
        
        public System.Threading.Tasks.Task<string> DocTypeIconUpdateAsync(string key, int id, int idIcon, int doctype, int weight, int priority, int attrib, CielaService.DatabasesEditableEnum dbId, string idUser)
        {
            return base.Channel.DocTypeIconUpdateAsync(key, id, idIcon, doctype, weight, priority, attrib, dbId, idUser);
        }
        
        public System.Threading.Tasks.Task<string> DocTypeIconDeleteAsync(string key, int id, CielaService.DatabasesEditableEnum dbId, string idUser)
        {
            return base.Channel.DocTypeIconDeleteAsync(key, id, dbId, idUser);
        }
        
        public System.Threading.Tasks.Task<string> DocIconsListGetAsync(string key, CielaService.DatabasesEditableEnum dbId)
        {
            return base.Channel.DocIconsListGetAsync(key, dbId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CielaService.DocumentsWithTypeAndDatesGetResponse> CielaService.PlainServiceSoap.DocumentsWithTypeAndDatesGetAsync(CielaService.DocumentsWithTypeAndDatesGetRequest request)
        {
            return base.Channel.DocumentsWithTypeAndDatesGetAsync(request);
        }
        
        public System.Threading.Tasks.Task<CielaService.DocumentsWithTypeAndDatesGetResponse> DocumentsWithTypeAndDatesGetAsync(string key, int[] docTypes, int[] docList, System.Nullable<System.DateTime>[] filterDates, CielaService.DatabasesEditableEnum dbId)
        {
            CielaService.DocumentsWithTypeAndDatesGetRequest inValue = new CielaService.DocumentsWithTypeAndDatesGetRequest();
            inValue.key = key;
            inValue.docTypes = docTypes;
            inValue.docList = docList;
            inValue.filterDates = filterDates;
            inValue.dbId = dbId;
            return ((CielaService.PlainServiceSoap)(this)).DocumentsWithTypeAndDatesGetAsync(inValue);
        }
        
        public System.Threading.Tasks.Task<string> StateGazetteTypesOfChangeGetAsync(string key, CielaService.DatabasesEditableEnum dbId)
        {
            return base.Channel.StateGazetteTypesOfChangeGetAsync(key, dbId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CielaService.StateGazetteEditionCreateResponse> CielaService.PlainServiceSoap.StateGazetteEditionCreateAsync(CielaService.StateGazetteEditionCreateRequest request)
        {
            return base.Channel.StateGazetteEditionCreateAsync(request);
        }
        
        public System.Threading.Tasks.Task<CielaService.StateGazetteEditionCreateResponse> StateGazetteEditionCreateAsync(string key, int partition, System.Nullable<System.DateTime> date, int issue, int idType, string idUser, CielaService.DatabasesEditableEnum dbId)
        {
            CielaService.StateGazetteEditionCreateRequest inValue = new CielaService.StateGazetteEditionCreateRequest();
            inValue.key = key;
            inValue.partition = partition;
            inValue.date = date;
            inValue.issue = issue;
            inValue.idType = idType;
            inValue.idUser = idUser;
            inValue.dbId = dbId;
            return ((CielaService.PlainServiceSoap)(this)).StateGazetteEditionCreateAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CielaService.StateGazetteEditionUpdateResponse> CielaService.PlainServiceSoap.StateGazetteEditionUpdateAsync(CielaService.StateGazetteEditionUpdateRequest request)
        {
            return base.Channel.StateGazetteEditionUpdateAsync(request);
        }
        
        public System.Threading.Tasks.Task<CielaService.StateGazetteEditionUpdateResponse> StateGazetteEditionUpdateAsync(string key, int idEdition, int partition, System.Nullable<System.DateTime> date, int issue, int idType, string idUser, CielaService.DatabasesEditableEnum dbId)
        {
            CielaService.StateGazetteEditionUpdateRequest inValue = new CielaService.StateGazetteEditionUpdateRequest();
            inValue.key = key;
            inValue.idEdition = idEdition;
            inValue.partition = partition;
            inValue.date = date;
            inValue.issue = issue;
            inValue.idType = idType;
            inValue.idUser = idUser;
            inValue.dbId = dbId;
            return ((CielaService.PlainServiceSoap)(this)).StateGazetteEditionUpdateAsync(inValue);
        }
        
        public System.Threading.Tasks.Task<string> StateGazetteEditionDeleteAsync(string key, int idEdition, string idUser, CielaService.DatabasesEditableEnum dbId)
        {
            return base.Channel.StateGazetteEditionDeleteAsync(key, idEdition, idUser, dbId);
        }
        
        public System.Threading.Tasks.Task<string> StateGazetteEditionsGetAsync(string key, int idType, CielaService.DatabasesEditableEnum dbId)
        {
            return base.Channel.StateGazetteEditionsGetAsync(key, idType, dbId);
        }
        
        public System.Threading.Tasks.Task<string> StateGazetteFilterDocumentsGetAsync(string key, int startIssue, System.DateTime startDate, int endIssue, System.DateTime endDate, int[] typeOfChanges, int partition, CielaService.DatabasesEditableEnum dbId)
        {
            return base.Channel.StateGazetteFilterDocumentsGetAsync(key, startIssue, startDate, endIssue, endDate, typeOfChanges, partition, dbId);
        }
        
        public System.Threading.Tasks.Task<string> DictionarySelectAsync(string key, int IDNA)
        {
            return base.Channel.DictionarySelectAsync(key, IDNA);
        }
        
        public System.Threading.Tasks.Task<string> ItemNameGetAsync(string key, int itemType, int idLang)
        {
            return base.Channel.ItemNameGetAsync(key, itemType, idLang);
        }
        
        public System.Threading.Tasks.Task<string> LegalDefsContentGetAsync(string key, CielaService.ProductsDbNameEnum dbId)
        {
            return base.Channel.LegalDefsContentGetAsync(key, dbId);
        }
        
        public System.Threading.Tasks.Task<string> LegalDefsGetDocsAsync(string key, int idPhrase, CielaService.ProductsDbNameEnum dbId)
        {
            return base.Channel.LegalDefsGetDocsAsync(key, idPhrase, dbId);
        }
        
        public System.Threading.Tasks.Task<CielaService.LegalDefsGetResponse> LegalDefsGetAsync(CielaService.LegalDefsGetRequest request)
        {
            return base.Channel.LegalDefsGetAsync(request);
        }
        
        public System.Threading.Tasks.Task<string> IndexBuildAsync(string key)
        {
            return base.Channel.IndexBuildAsync(key);
        }
        
        public System.Threading.Tasks.Task<string> IndexUpdateAsync(string key)
        {
            return base.Channel.IndexUpdateAsync(key);
        }
        
        public System.Threading.Tasks.Task<string> SearchTypesGetAsync(string key)
        {
            return base.Channel.SearchTypesGetAsync(key);
        }
        
        public System.Threading.Tasks.Task<string> SearchTypesUpdateAsync(string key, string searchTypes)
        {
            return base.Channel.SearchTypesUpdateAsync(key, searchTypes);
        }
        
        public System.Threading.Tasks.Task<string> SearchTypesAddAsync(string key, string searchTypes)
        {
            return base.Channel.SearchTypesAddAsync(key, searchTypes);
        }
        
        public System.Threading.Tasks.Task<string> SearchInTheFutureAsync(string key, int searchID)
        {
            return base.Channel.SearchInTheFutureAsync(key, searchID);
        }
        
        public System.Threading.Tasks.Task<string> CalendarOfTimeLimitAsync(string key, System.DateTime startDate, System.DateTime endDate, int period)
        {
            return base.Channel.CalendarOfTimeLimitAsync(key, startDate, endDate, period);
        }
        
        public System.Threading.Tasks.Task<string> DocumentsAbrivGetAsync(string key)
        {
            return base.Channel.DocumentsAbrivGetAsync(key);
        }
        
        public System.Threading.Tasks.Task<string> DocumentsInForceGetAsync(string key, System.DateTime fromDate, System.DateTime toDate)
        {
            return base.Channel.DocumentsInForceGetAsync(key, fromDate, toDate);
        }
        
        public System.Threading.Tasks.Task<string> DocumentsOutForceGetAsync(string key, System.DateTime fromDate, System.DateTime toDate)
        {
            return base.Channel.DocumentsOutForceGetAsync(key, fromDate, toDate);
        }
        
        public System.Threading.Tasks.Task<string> DocumentsChangedGetAsync(string key, System.DateTime fromDate, System.DateTime toDate)
        {
            return base.Channel.DocumentsChangedGetAsync(key, fromDate, toDate);
        }
        
        public System.Threading.Tasks.Task<string> DocumentsReferToChangedDocumentsGetAsync(string key, System.DateTime fromDate, System.DateTime toDate)
        {
            return base.Channel.DocumentsReferToChangedDocumentsGetAsync(key, fromDate, toDate);
        }
        
        public System.Threading.Tasks.Task<string> InvestigationRefsButtonsGetAsync(string key, int idna)
        {
            return base.Channel.InvestigationRefsButtonsGetAsync(key, idna);
        }
        
        public System.Threading.Tasks.Task<string> InvestigationRefsTreeGetAsync(string key, int idRef)
        {
            return base.Channel.InvestigationRefsTreeGetAsync(key, idRef);
        }
        
        public System.Threading.Tasks.Task<string> ExpertiziRefsButtonsGetAsync(string key, int idna)
        {
            return base.Channel.ExpertiziRefsButtonsGetAsync(key, idna);
        }
        
        public System.Threading.Tasks.Task<string> ExpertiziRefsTreeGetAsync(string key, int idRef)
        {
            return base.Channel.ExpertiziRefsTreeGetAsync(key, idRef);
        }
        
        public System.Threading.Tasks.Task<string> CalculateAllChecksumsAsync(string key)
        {
            return base.Channel.CalculateAllChecksumsAsync(key);
        }
        
        public System.Threading.Tasks.Task<string> SearchByPagesAsync(string searchPhrase, int offset, int resultsCount, string key)
        {
            return base.Channel.SearchByPagesAsync(searchPhrase, offset, resultsCount, key);
        }
        
        public System.Threading.Tasks.Task<string> SortedSearchByPagesAsync(string searchPhrase, int offset, int resultsCount, string searchField, bool reverseOorder, string key)
        {
            return base.Channel.SortedSearchByPagesAsync(searchPhrase, offset, resultsCount, searchField, reverseOorder, key);
        }
        
        public System.Threading.Tasks.Task<string> GetDataForIndexingAsync(string key, int offset, int limit)
        {
            return base.Channel.GetDataForIndexingAsync(key, offset, limit);
        }
        
        public System.Threading.Tasks.Task<string> GetXMLFieldsAsync(string key, int type)
        {
            return base.Channel.GetXMLFieldsAsync(key, type);
        }
        
        public System.Threading.Tasks.Task<string> SearchCountAsync(string key, string searchPhrase)
        {
            return base.Channel.SearchCountAsync(key, searchPhrase);
        }
        
        public System.Threading.Tasks.Task<string> SearchCount2Async(string key, string searchPhrase)
        {
            return base.Channel.SearchCount2Async(key, searchPhrase);
        }
        
        public System.Threading.Tasks.Task<string> GetSearchYearListAsync(string key, string searchQuery)
        {
            return base.Channel.GetSearchYearListAsync(key, searchQuery);
        }
        
        public System.Threading.Tasks.Task<string> DistributorGetCurrentAsync(string key)
        {
            return base.Channel.DistributorGetCurrentAsync(key);
        }
        
        public System.Threading.Tasks.Task<string> DistributorSaveCurrentAsync(string key, int id, string info)
        {
            return base.Channel.DistributorSaveCurrentAsync(key, id, info);
        }
        
        public System.Threading.Tasks.Task<string> DistributorsGetAsync(string key)
        {
            return base.Channel.DistributorsGetAsync(key);
        }
        
        public System.Threading.Tasks.Task<bool> XmlUpdateAsync(int idna, string xml)
        {
            return base.Channel.XmlUpdateAsync(idna, xml);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> PrivateAccessListAsync(string accessKey)
        {
            return base.Channel.PrivateAccessListAsync(accessKey);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CielaService.PrivateAccessDocumentResponse> CielaService.PlainServiceSoap.PrivateAccessDocumentAsync(CielaService.PrivateAccessDocumentRequest request)
        {
            return base.Channel.PrivateAccessDocumentAsync(request);
        }
        
        public System.Threading.Tasks.Task<CielaService.PrivateAccessDocumentResponse> PrivateAccessDocumentAsync(string accessKey, int db, int id)
        {
            CielaService.PrivateAccessDocumentRequest inValue = new CielaService.PrivateAccessDocumentRequest();
            inValue.accessKey = accessKey;
            inValue.db = db;
            inValue.id = id;
            return ((CielaService.PlainServiceSoap)(this)).PrivateAccessDocumentAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CielaService.PrivateAccessPdfResponse> CielaService.PlainServiceSoap.PrivateAccessPdfAsync(CielaService.PrivateAccessPdfRequest request)
        {
            return base.Channel.PrivateAccessPdfAsync(request);
        }
        
        public System.Threading.Tasks.Task<CielaService.PrivateAccessPdfResponse> PrivateAccessPdfAsync(string accessKey, int db, int id)
        {
            CielaService.PrivateAccessPdfRequest inValue = new CielaService.PrivateAccessPdfRequest();
            inValue.accessKey = accessKey;
            inValue.db = db;
            inValue.id = id;
            return ((CielaService.PlainServiceSoap)(this)).PrivateAccessPdfAsync(inValue);
        }
        
        public System.Threading.Tasks.Task<string> GerRegistrationStatusAsync(string key, string query)
        {
            return base.Channel.GerRegistrationStatusAsync(key, query);
        }
        
        public System.Threading.Tasks.Task<string> GetLicenseInfoAsync(string key)
        {
            return base.Channel.GetLicenseInfoAsync(key);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CielaService.CheckDocumentLicenseNew1> CielaService.PlainServiceSoap.CheckDocumentLicenseAsync(CielaService.CheckDocumentLicenseNew request)
        {
            return base.Channel.CheckDocumentLicenseAsync(request);
        }
        
        public System.Threading.Tasks.Task<CielaService.CheckDocumentLicenseNew1> CheckDocumentLicenseAsync(string strDocID, byte[] xml, string key)
        {
            CielaService.CheckDocumentLicenseNew inValue = new CielaService.CheckDocumentLicenseNew();
            inValue.strDocID = strDocID;
            inValue.xml = xml;
            inValue.key = key;
            return ((CielaService.PlainServiceSoap)(this)).CheckDocumentLicenseAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CielaService.CheckDocumentLicenseResponse> CielaService.PlainServiceSoap.CheckDocumentLicense1Async(CielaService.CheckDocumentLicenseRequest request)
        {
            return base.Channel.CheckDocumentLicense1Async(request);
        }
        
        public System.Threading.Tasks.Task<CielaService.CheckDocumentLicenseResponse> CheckDocumentLicense1Async(string strDocID, string key)
        {
            CielaService.CheckDocumentLicenseRequest inValue = new CielaService.CheckDocumentLicenseRequest();
            inValue.strDocID = strDocID;
            inValue.key = key;
            return ((CielaService.PlainServiceSoap)(this)).CheckDocumentLicense1Async(inValue);
        }
        
        public System.Threading.Tasks.Task PingUserLicenseAsync(string key)
        {
            return base.Channel.PingUserLicenseAsync(key);
        }
        
        public System.Threading.Tasks.Task<int> MigrateFromCiela4LicensesAsync(string LicenseFile, string key)
        {
            return base.Channel.MigrateFromCiela4LicensesAsync(LicenseFile, key);
        }
        
        public System.Threading.Tasks.Task ImportCSalesLicensesAsync(string key)
        {
            return base.Channel.ImportCSalesLicensesAsync(key);
        }
        
        public System.Threading.Tasks.Task<string> HelloAsync(string hello)
        {
            return base.Channel.HelloAsync(hello);
        }
        
        public System.Threading.Tasks.Task<string> TestInitInstanceAsync()
        {
            return base.Channel.TestInitInstanceAsync();
        }
        
        public System.Threading.Tasks.Task<int> TermInsertAsync(string key, int idna, CielaService.ArrayOfXElement termEvent, CielaService.ProductsDbNameEnum dbId)
        {
            return base.Channel.TermInsertAsync(key, idna, termEvent, dbId);
        }
        
        public System.Threading.Tasks.Task<CielaService.ArrayOfXElement> TimeFilteredTermsGetAsync(string key, System.DateTime startDate, System.DateTime endDate, CielaService.ProductsDbNameEnum[] dbIds)
        {
            return base.Channel.TimeFilteredTermsGetAsync(key, startDate, endDate, dbIds);
        }
        
        public System.Threading.Tasks.Task<CielaService.ArrayOfXElement> StructureFilteredTermsGetAsync(string key, System.DateTime startDate, System.DateTime endDate, int structureType, CielaService.ProductsDbNameEnum[] dbIds)
        {
            return base.Channel.StructureFilteredTermsGetAsync(key, startDate, endDate, structureType, dbIds);
        }
        
        public System.Threading.Tasks.Task<bool> TermUpdateAsync(string key, CielaService.ArrayOfXElement termEvent, CielaService.ProductsDbNameEnum dbId)
        {
            return base.Channel.TermUpdateAsync(key, termEvent, dbId);
        }
        
        public System.Threading.Tasks.Task<bool> TermDeleteAsync(string key, int id, CielaService.ProductsDbNameEnum dbId)
        {
            return base.Channel.TermDeleteAsync(key, id, dbId);
        }
        
        public System.Threading.Tasks.Task<CielaService.ArrayOfXElement> TermInfoGetAsync(string key, int idna, CielaService.ProductsDbNameEnum dbId)
        {
            return base.Channel.TermInfoGetAsync(key, idna, dbId);
        }
        
        public System.Threading.Tasks.Task<int> GetItemGroupAsync(string key, int idna, int iditem)
        {
            return base.Channel.GetItemGroupAsync(key, idna, iditem);
        }
        
        public System.Threading.Tasks.Task<string> GetDocumentChecksumAsync(string key, int idna, CielaService.ProductsDbNameEnum dbId)
        {
            return base.Channel.GetDocumentChecksumAsync(key, idna, dbId);
        }
        
        public System.Threading.Tasks.Task SetLicenceInstallIDAsync(string InstallID, string key)
        {
            return base.Channel.SetLicenceInstallIDAsync(InstallID, key);
        }
        
        public System.Threading.Tasks.Task<string> EuroTreeStructureSelectAsync(string key, int structItemID, string sortOrder, string condition, bool isClientRegime)
        {
            return base.Channel.EuroTreeStructureSelectAsync(key, structItemID, sortOrder, condition, isClientRegime);
        }
        
        public System.Threading.Tasks.Task<string> EuroTreeStructureSelectAllAsync(string key, bool isClientRegime)
        {
            return base.Channel.EuroTreeStructureSelectAllAsync(key, isClientRegime);
        }
        
        public System.Threading.Tasks.Task<string> EuroTreeStructureContentSelectWithoutDateAsync(string key, int structItemID)
        {
            return base.Channel.EuroTreeStructureContentSelectWithoutDateAsync(key, structItemID);
        }
        
        public System.Threading.Tasks.Task<string> EuroTreeStructureContentSelectCurrentDateAsync(string key, int structItemID, System.DateTime currentDate)
        {
            return base.Channel.EuroTreeStructureContentSelectCurrentDateAsync(key, structItemID, currentDate);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.PlainServiceSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.PlainServiceSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.PlainServiceSoap))
            {
                return new System.ServiceModel.EndpointAddress("http://hybridout.ciela.net/plainservice.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.PlainServiceSoap12))
            {
                return new System.ServiceModel.EndpointAddress("http://hybridout.ciela.net/plainservice.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            PlainServiceSoap,
            
            PlainServiceSoap12,
        }
    }
    
    [System.Xml.Serialization.XmlSchemaProviderAttribute(null, IsAny=true)]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil-lib", "2.0.0.1")]
    public partial class ArrayOfXElement : object, System.Xml.Serialization.IXmlSerializable
    {
        
        private System.Collections.Generic.List<System.Xml.Linq.XElement> nodesList = new System.Collections.Generic.List<System.Xml.Linq.XElement>();
        
        public ArrayOfXElement()
        {
        }
        
        public virtual System.Collections.Generic.List<System.Xml.Linq.XElement> Nodes
        {
            get
            {
                return this.nodesList;
            }
        }
        
        public virtual System.Xml.Schema.XmlSchema GetSchema()
        {
            throw new System.NotImplementedException();
        }
        
        public virtual void WriteXml(System.Xml.XmlWriter writer)
        {
            System.Collections.Generic.IEnumerator<System.Xml.Linq.XElement> e = nodesList.GetEnumerator();
            for (
            ; e.MoveNext(); 
            )
            {
                ((System.Xml.Serialization.IXmlSerializable)(e.Current)).WriteXml(writer);
            }
        }
        
        public virtual void ReadXml(System.Xml.XmlReader reader)
        {
            for (
            ; (reader.NodeType != System.Xml.XmlNodeType.EndElement); 
            )
            {
                if ((reader.NodeType == System.Xml.XmlNodeType.Element))
                {
                    System.Xml.Linq.XElement elem = new System.Xml.Linq.XElement("default");
                    ((System.Xml.Serialization.IXmlSerializable)(elem)).ReadXml(reader);
                    Nodes.Add(elem);
                }
                else
                {
                    reader.Skip();
                }
            }
        }
    }
}
